<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用中转服务器代理访问内网bySSinDocker</title>
    <link href="/2022/10/27/shi-yong-zhong-zhuan-fu-wu-qi-dai-li-fang-wen-nei-wang-byssindocker/"/>
    <url>/2022/10/27/shi-yong-zhong-zhuan-fu-wu-qi-dai-li-fang-wen-nei-wang-byssindocker/</url>
    
    <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>通过常用的代理软件（小火箭）连接到处于内网环境的代理服务器，从而实现在任意地方访问内网的需求，进而可以使用内网跳板机连接其他内网机器，突破SSL会话限制。</p><p><img src="/%E4%BD%BF%E7%94%A8%E4%B8%AD%E8%BD%AC%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91bySSinDocker/image-20221027122230481.png" alt="在外网可以使用代理服务器访问内网服务"></p><h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ol><li><p>为方便快捷，使用docker在内网中部署shadowsocks服务器，放出端口</p></li><li><p>为从外部访问内网，使用docker部署frpc监听ss服务器端口，连接带有公网IP的frps</p></li><li><p>终端设备上使用Shadowrocket连接ss服务器，配置节点</p></li></ol><h2 id="搭建SS服务器"><a href="#搭建SS服务器" class="headerlink" title="搭建SS服务器"></a>搭建SS服务器</h2><p>此处选择的docker镜像是<a href="https://registry.hub.docker.com/r/gists/shadowsocks-libev/">gists&#x2F;shadowsocks-libev</a>，优势是很轻量，只有12M，后面可以研究v2ray插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>--name ss \<br>           -p 8388:8388 \<br>           -p 8388:8388/udp \<br>           -e METHOD=aes-256-gcm \<br>           -e PASSWORD=YOUR_PASSWORD \<br>gists/shadowsocks-libev<br></code></pre></td></tr></table></figure><h2 id="搭建frpc"><a href="#搭建frpc" class="headerlink" title="搭建frpc"></a>搭建frpc</h2><p>如果你本身就在用frpc，直接添加一个新的服务名和配置就好。</p><p>需要提前写好frpc的配置文件，里面需要配置frpc监听和转发到中转服务器的端口，记得打开中转服务器的防火墙放行该端口。我这边演示使用8389端口。</p><p>frpc.ini配置示例</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = YOUR_IP<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">token</span> = YOUR_TOKEN<br><br><span class="hljs-section">[ss]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">8388</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">8389</span><br></code></pre></td></tr></table></figure><p>运行frpc</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run  -d \<br>--name frpc \<br>--network host \ <br> -v <span class="hljs-regexp">/etc/</span>frp<span class="hljs-regexp">/frpc.ini:/</span>etc<span class="hljs-regexp">/frp/</span>frpc.ini \<br>snowdreamtech/frpc<br></code></pre></td></tr></table></figure><h2 id="配置Shadowrocket小火箭"><a href="#配置Shadowrocket小火箭" class="headerlink" title="配置Shadowrocket小火箭"></a>配置Shadowrocket小火箭</h2><p>进入小火箭点击右上角的加号</p><img src="/2022/10/27/shi-yong-zhong-zhuan-fu-wu-qi-dai-li-fang-wen-nei-wang-byssindocker/image-20221027144752017.png" alt="image-20221027144752017" style="zoom: 25%;"><p>填写内容，需要对应ss服务器上的配置填写</p><img src="/2022/10/27/shi-yong-zhong-zhuan-fu-wu-qi-dai-li-fang-wen-nei-wang-byssindocker/image-20221027145506511.png" alt="image-20221027145506511" style="zoom: 25%;"><p>然后可以在首页的本地节点中看到刚添加的节点</p><p>点击连通性测试查看是否网络已打通</p><p>之后我们以外网的环境开始测试能否访问内网，我这里的内网使用的网段是192.168.31.0&#x2F;24，而小火箭默认是不转发192.168.0.0&#x2F;16网段的数据的（因为内网不需要规则转发），此处需要修改我们的规则，建议先导出保存一份</p><img src="/2022/10/27/shi-yong-zhong-zhuan-fu-wu-qi-dai-li-fang-wen-nei-wang-byssindocker/image-20221027150207562.png" alt="image-20221027150207562" style="zoom:25%;"><p>进入后点击通用</p><img src="/2022/10/27/shi-yong-zhong-zhuan-fu-wu-qi-dai-li-fang-wen-nei-wang-byssindocker/image-20221027150257581.png" alt="image-20221027150257581" style="zoom:25%;"><p>我删除这里的两个192.168.0.0&#x2F;16网段，你需要根据自己的内网网段删除。</p><p>然后准备添加配置文件，目的是将你自己的内网IP通过ss服务器转发到内网中。（这一步建议将默认conf配置文件备份好）我这里进入default.conf，点击测试规则，测试你的内网IP。</p><img src="/2022/10/27/shi-yong-zhong-zhuan-fu-wu-qi-dai-li-fang-wen-nei-wang-byssindocker/image-20221027171319764.png" alt="image-20221027171319764" style="zoom:25%;"><p>我这里测试我的内网网关</p><img src="/2022/10/27/shi-yong-zhong-zhuan-fu-wu-qi-dai-li-fang-wen-nei-wang-byssindocker/image-20221027171655099.png" alt="image-20221027171655099" style="zoom:25%;"><p>可以看到它成功测试出了这条网关地址CIDR前缀是24，并选择使用PROXY规则转发给代理服务器。如果无误可以直接点击<strong>添加IP到规则</strong>。</p><p>或者你可以像我一样添加整个网段。</p><p><img src="/%E4%BD%BF%E7%94%A8%E4%B8%AD%E8%BD%AC%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91bySSinDocker/image-20221027171938222.png" alt="image-20221027171938222"></p><p>这样就可以直接访问子网下的所有设备了，我这里开启连接ss代理后就能直接访问内网中的nas</p><img src="/2022/10/27/shi-yong-zhong-zhuan-fu-wu-qi-dai-li-fang-wen-nei-wang-byssindocker/image-20221027172217114.png" alt="image-20221027172217114" style="zoom: 25%;"><p>后面只需要在需要访问内网时开启小火箭代理就可以了！</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟局域网技术VLAN解析</title>
    <link href="/2022/10/17/xu-ni-ju-yu-wang-ji-zhu-vlan-jie-xi/"/>
    <url>/2022/10/17/xu-ni-ju-yu-wang-ji-zhu-vlan-jie-xi/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟局域网技术"><a href="#虚拟局域网技术" class="headerlink" title="虚拟局域网技术"></a>虚拟局域网技术</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作在数据链路层的以太网交换机由于以太网规模的扩大导致广播域扩大，造成的<u>广播风暴</u>可能会导致网络瘫痪。</p><p>广播信息的来源主要是涉及到地址解析、名称解析的行为：</p><ol><li>网络层 TCP&#x2F;IP协议栈中的协议：地址解析协议ARP，路由信息协议RIP，DHCP</li><li>会话层协议：网上基本输入输出系统NETBIOS</li><li>应用层协议：链路本地多播名称解析LLMNR</li></ol><p>网络中的广播信息无处不在，想要克制不去使用是<strong>不现实的</strong>，因此我们应该想办法减小广播的影响范围即广播域。</p><p>对于网络负载过高、通信性能下降的情况，往往需要管理员手动更改网络拓扑结构，如变更主机网段、硬件线路改造等。出现VLAN之后就<strong>只需要修改网络结构</strong>。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>虚拟局域网（Virtual LAN,VLAN），是将一个物理的LAN在逻辑上划分成多个广播域的通信技术。每个VLAN是一个广播域，VLAN内的主机间通信就和在一个LAN内一样，而VLAN间则不能直接互通，这样，广播报文就被限制在一个VLAN内。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h1 id="虚拟扩展局域网"><a href="#虚拟扩展局域网" class="headerlink" title="虚拟扩展局域网"></a>虚拟扩展局域网</h1><h2 id="VLAN的限制"><a href="#VLAN的限制" class="headerlink" title="VLAN的限制"></a>VLAN的限制</h2><p>传统VLAN标识ID字段的VID只有12bit，最多能取4094个值，对于大型的应用场景能力有限。</p><h2 id="VXLAN"><a href="#VXLAN" class="headerlink" title="VXLAN"></a>VXLAN</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>本质上是隧道技术。</p><h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h2 id="虚拟局域网技术展望"><a href="#虚拟局域网技术展望" class="headerlink" title="虚拟局域网技术展望"></a>虚拟局域网技术展望</h2><h1 id="虚拟局域网实验"><a href="#虚拟局域网实验" class="headerlink" title="虚拟局域网实验"></a>虚拟局域网实验</h1><p>把一个物理网络从逻辑上划分为几个单独的局域网</p><h2 id="没有划分VLAN的网络"><a href="#没有划分VLAN的网络" class="headerlink" title="没有划分VLAN的网络"></a>没有划分VLAN的网络</h2><h2 id="划分VLAN的网络"><a href="#划分VLAN的网络" class="headerlink" title="划分VLAN的网络"></a>划分VLAN的网络</h2><h2 id="VLAN之间互通"><a href="#VLAN之间互通" class="headerlink" title="VLAN之间互通"></a>VLAN之间互通</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用wireguard搭建属于自己的虚拟内网</title>
    <link href="/2022/10/16/shi-yong-wireguard-da-jian-shu-yu-zi-ji-de-xu-ni-nei-wang/"/>
    <url>/2022/10/16/shi-yong-wireguard-da-jian-shu-yu-zi-ji-de-xu-ni-nei-wang/</url>
    
    <content type="html"><![CDATA[<h1 id="使用wireguard搭建属于自己的虚拟内网"><a href="#使用wireguard搭建属于自己的虚拟内网" class="headerlink" title="使用wireguard搭建属于自己的虚拟内网"></a>使用wireguard搭建属于自己的虚拟内网</h1><blockquote><p>本文将使用wireguard的docker镜像，借助中转服务器，快速方便的部署出一个属于自己的虚拟内网，网内地址完全自定义，支持全平台。</p></blockquote><h2 id="wireguard结果展示"><a href="#wireguard结果展示" class="headerlink" title="wireguard结果展示"></a>wireguard结果展示</h2><p>wireguard分为服务端和客户端，其中服务端需要部署在有公网IP的服务器上，需要加入内网的设备需要单独安装客户端并启动。</p><p>在部署完成后是这样的效果：</p><p><img src="/%E4%BD%BF%E7%94%A8wireguard%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E7%BD%91/%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90%E6%B5%8B%E9%80%9F.png" alt="部署完成测速"></p><p>右侧测速结果显示5.67&#x2F;5.63Mbps，<strong>跑满</strong>了我的中转服务器的<strong>6Mbps</strong>，速度还是十分给力的。</p><p>在手机上我也可以直接通过<strong>内网IP</strong>在外面访问到NAS中的数据：</p><img src="/2022/10/16/shi-yong-wireguard-da-jian-shu-yu-zi-ji-de-xu-ni-nei-wang/手机上的群晖.PNG" alt="手机上的群晖" style="zoom:33%;"><p>同时配置在lab内网的个人服务器也可以直接用内网ssh访问，这一点和配置frp的效果倒是相同的。不过我认为wireguard强大就在于，不用像frp每个需要开放的端口都得配置，然后在中转服务器开端口。wireguard本体只需要在中转服务器开一个UDP端口就可以使用内网访问其他客户端所有的端口。这在做调试工作时会方便许多。</p><p><img src="/%E4%BD%BF%E7%94%A8wireguard%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E7%BD%91/image-20221016121811707.png" alt="访问虚拟内网中的hadoop"></p><blockquote><p>虽然lab内的环境更舒适，但总是想随时访问某些服务的冲动我想好多人都会有吧哈哈哈哈哈</p></blockquote><h2 id="快速搭建wireguard"><a href="#快速搭建wireguard" class="headerlink" title="快速搭建wireguard"></a>快速搭建wireguard</h2><blockquote><p>搭建过程也可以参考：<a href="https://gitee.com/spoto/wireguard">https://gitee.com/spoto/wireguard</a></p></blockquote><p>本文使用<code>weejewel/wg-easy</code>的docker镜像快速搭建起可用的虚拟内网。</p><p>首先登陆中转服务器，我这里使用的是腾讯云上的ubuntu服务器，将下面的命令改好后直接运行（IP、密码、网段都需要填自己的哦）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run -d \<br>  --name=wg-easy \<br>  -e WG_HOST=123.123.123.123 (🚨这里输入服务器的公网IP) \<br>  -e PASSWORD=passwd123 (🚨这里输入你的密码) \<br>  -e WG_DEFAULT_ADDRESS=10.0.8.x （🚨默认IP地址）\<br>  -e WG_ALLOWED_IPS=10.0.8.0/24 （🚨允许连接的IP段）\<br>  -e WG_PERSISTENT_KEEPALIVE=25 （🚨重连间隔）\<br>  -v ~/.wg-easy:/etc/wireguard \<br>  -p 51820:51820/udp \<br>  -p 51821:51821/tcp \<br>  --cap-add=NET_ADMIN \<br>  --cap-add=SYS_MODULE \<br>  --sysctl=<span class="hljs-string">&quot;net.ipv4.conf.all.src_valid_mark=1&quot;</span> \<br>  --sysctl=<span class="hljs-string">&quot;net.ipv4.ip_forward=1&quot;</span> \<br>  --restart unless-stopped \<br>  weejewel/wg-easy<br></code></pre></td></tr></table></figure><p>运行起来之后记得开启两个设置过的端口，一个udp一个tcp，然后可以根据tcp端口登陆到管理界面，输入刚才设置的密码，这就是这个镜像的方便快捷之处，减少了手动创建配置的过程。</p><p><img src="/%E4%BD%BF%E7%94%A8wireguard%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E7%BD%91/image-20221016122810680.png" alt="创建完成配置完成后的样子"></p><p>我这里显示的就是配置客户端之后的样子，一开始进来还什么都没有，先点击<code>+New</code>创建一个新的配置。</p><ol><li><p>如果不熟悉的话可以先用手机下载对应的客户端（名字就是wireguard），然后扫码添加配置，就进入到内网了。</p></li><li><p>如果是Mac和Windows也是一样的配置方法：</p><ul><li>先下载客户端，Mac直接在appstore搜索wireguard，港区可以点这里<a href="https://apps.apple.com/hk/app/wireguard/id1451685025?mt=12">港区wireguard链接</a></li><li>下载管理界面的配置文件xxx.conf</li><li>客户端内添加隧道，选择xxx.conf</li><li>开启隧道链接，进入内网，可以<code>ping</code>命令查看是否通畅</li></ul></li><li><p>如果你想把ubuntu等服务器加入wireguard:</p><ul><li>在Ubuntu上要下载客户端<code>sudo apt install wireguard</code></li><li>下载管理界面的配置文件xxx.conf</li><li>scp上传conf文件到ubuntu，或者直接在ubuntu上新建文档将内容复制进去，保证文件名一样</li><li><code>sudo wg-quick up xxx</code>开启配置，<code>sudo wg-quick down xxx</code>关闭配置</li><li><code>sudo wg</code>可以查看wireguard开启的服务。</li></ul><p><img src="/%E4%BD%BF%E7%94%A8wireguard%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E7%BD%91/image-20221016161236707.png" alt="wireguard查看当前开放的虚拟网卡"></p></li><li><p>如果你想把NAS加入wireguard(以群晖为例)：</p><ul><li><p>群晖的套件中心功能不多，需要加入社群扩展，点击套件中心-设置-套件来源-新增，名称随意，位置<a href="https://spk7.imnks.com/">https://spk7.imnks.com/</a></p><p><img src="/%E4%BD%BF%E7%94%A8wireguard%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E7%BD%91/image-20221016162618677.png" alt="群晖内的套件中心"></p></li><li><p>在社群中搜索wireguard安装，需要ssh到群晖上执行<code>sudo sed -i &#39;s/package/root/g&#39; /var/packages/WireGuard/conf/privilege</code></p></li><li><p>后面步骤同Ubuntu，只是省略了安装apt安装的步骤。</p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>内网</tag>
      
      <tag>wireguard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu上基于docker搭建Hadoop集群</title>
    <link href="/2022/10/07/ubuntu-shang-de-ji-yu-docker-da-jian-hadoop-ji-qun/"/>
    <url>/2022/10/07/ubuntu-shang-de-ji-yu-docker-da-jian-hadoop-ji-qun/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker操作"><a href="#Docker操作" class="headerlink" title="Docker操作"></a>Docker操作</h1><p>先学习一下基础的docker命令，后面常用，这里放出来备查</p><h2 id="查看容器container"><a href="#查看容器container" class="headerlink" title="查看容器container"></a>查看容器container</h2><p>docker ps 的命令包括：<br>1）-a 列出所有容器<br>2）-l 列出最新创建容器<br>3）-n&#x3D;2 列出最近创建的2个容器<br>4）-q 仅列出容器ID<br>5）-s 显示容器大小 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo docker ps -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> docker rm <span class="hljs-number">1051267</span>f9afb<br></code></pre></td></tr></table></figure><h2 id="查看镜像image"><a href="#查看镜像image" class="headerlink" title="查看镜像image"></a>查看镜像image</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo docker images</span><br></code></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> docker rmi <span class="hljs-number">5</span>d0da3dc9764<br></code></pre></td></tr></table></figure><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> docker run -itd weicg/hadoop:<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>-d表示在后台运行，需要进入容器</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">sudo docker exec -<span class="hljs-keyword">it</span> be349f8dd945 bash<br></code></pre></td></tr></table></figure><ul><li>使用exec 进入容器时exit命令不会结束容器</li></ul><h1 id="Hadoop集群搭建"><a href="#Hadoop集群搭建" class="headerlink" title="Hadoop集群搭建"></a>Hadoop集群搭建</h1><h2 id="准备镜像"><a href="#准备镜像" class="headerlink" title="准备镜像"></a>准备镜像</h2><p>我选择的是dockerhub上的<code>weicg/hadoop:1.2</code>,同样是一位初学者制作的，试用还算可以（单机可以开箱即用）不过这里搭建集群还需要修改一些内容。来源：<a href="https://hub.docker.com/r/weicg/hadoop">https://hub.docker.com/r/weicg/hadoop</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker pull weicg/hadoop:1.2<br></code></pre></td></tr></table></figure><p>我们打算建立一个<strong>一主两从</strong>的集群，需要开三个容器</p><h2 id="建立网桥"><a href="#建立网桥" class="headerlink" title="建立网桥"></a>建立网桥</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">sudo docker network <span class="hljs-built_in">create</span> <span class="hljs-comment">--driver bridge hadoop-br</span><br></code></pre></td></tr></table></figure><h2 id="开启多个容器"><a href="#开启多个容器" class="headerlink" title="开启多个容器"></a>开启多个容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run -itd --network hadoop-br --name hadoop1 -p 50070:50070 -p 8088:8088 weicg/hadoop:1.2<br>sudo docker run -itd --network hadoop-br --name hadoop2 weicg/hadoop:1.2<br>sudo docker run -itd --network hadoop-br --name hadoop3 weicg/hadoop:1.2<br></code></pre></td></tr></table></figure><p>得到三个容器</p><ul><li>23c1187f8492</li><li>676e08f5ecc5</li><li>d2ec810e1e89</li></ul><p>进入这些容器只需要</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">sudo docker exec -<span class="hljs-keyword">it</span> hadoop1 bash<br>sudo docker exec -<span class="hljs-keyword">it</span> hadoop2 bash<br>sudo docker exec -<span class="hljs-keyword">it</span> hadoop3 bash<br></code></pre></td></tr></table></figure><h2 id="查看网桥配置"><a href="#查看网桥配置" class="headerlink" title="查看网桥配置"></a>查看网桥配置</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo docker network <span class="hljs-keyword">inspect </span>hadoop-<span class="hljs-keyword">br </span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;Containers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;23c1187f84929b19883f3ff3452688fca46c101e43bdfcc2a0cabaa4cd4fc593&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hadoop1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;EndpointID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;27504f3d67c0a1e884ab8420c717b7bf5f3aa7db211360fa19a0d501fa6f9ed7&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;MacAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;02:42:ac:12:00:02&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;IPv4Address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;172.18.0.2/16&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;IPv6Address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;676e08f5ecc5273542efd51e554ef1fa8790b2aa4a57fa3516cb39d6b09cfb7f&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hadoop2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;EndpointID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;b766f1d85e339558f0bbf89e52e8e9a103c8d8e5b593dbcb6832367a925dcb4f&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;MacAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;02:42:ac:12:00:03&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;IPv4Address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;172.18.0.3/16&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;IPv6Address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;d2ec810e1e897f47add8b09f8a813b6c23ab892fddd0706b88373d7f67f76b2f&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hadoop3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;EndpointID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;552975d97feddc22fcf5d4ac1afa61be698846f08727e249d7581aaa33e220c2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;MacAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;02:42:ac:12:00:04&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;IPv4Address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;172.18.0.4/16&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;IPv6Address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以看到三个docker的ip地址</p><p>172.18.0.2 hadoop1 </p><p>172.18.0.3 hadoop2 </p><p>172.18.0.4 hadoop3 </p><p>使用<code>ping</code>命令分别检查是否网络通畅</p><p>以下命令需要分别进入三个容器内执行</p><p>1.更改hosts文件<code>vim /etc/hosts</code>,加入如下配置</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.18.0.2</span> hadoop1 <br><span class="hljs-number">172.18.0.3</span> hadoop2 <br><span class="hljs-number">172.18.0.4</span> hadoop3 <br></code></pre></td></tr></table></figure><p>2.分别在三个容器内配置ssh,因为镜像已经生成了密钥，此处将本机密钥加入本机的访问列表中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br><span class="hljs-built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys<br></code></pre></td></tr></table></figure><p>完成后可以<code>ssh root@hadoop2</code>查看是否成功配置ssh和网络。</p><h2 id="配置hadoop文件"><a href="#配置hadoop文件" class="headerlink" title="配置hadoop文件"></a>配置hadoop文件</h2><p>进入hadoop1,创建一些配置用到的文件夹</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/home/</span>hadoop<br>mkdir <span class="hljs-regexp">/home/</span>hadoop<span class="hljs-regexp">/tmp /</span>home<span class="hljs-regexp">/hadoop/</span>hdfs_name <span class="hljs-regexp">/home/</span>hadoop/hdfs_data<br></code></pre></td></tr></table></figure><p>切到hadoop配置目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-regexp">/etc/</span>hadoop/<br></code></pre></td></tr></table></figure><p>下面的编辑部分可以直接拷贝覆盖粘贴</p><h3 id="编辑workers文件"><a href="#编辑workers文件" class="headerlink" title="编辑workers文件"></a>编辑workers文件</h3><p><code>vim workers</code></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">hadoop2<br>hadoop3<br></code></pre></td></tr></table></figure><h3 id="编辑core-site-xml"><a href="#编辑core-site-xml" class="headerlink" title="编辑core-site.xml"></a>编辑core-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://hadoop1:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/home/hadoop/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>io.file.buffer.size<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>131702<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编辑hdfs-site-xml"><a href="#编辑hdfs-site-xml" class="headerlink" title="编辑hdfs-site.xml"></a>编辑hdfs-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/home/hadoop/hdfs_name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:/home/hadoop/hdfs_data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop1:9001<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编辑mapred-site-xml"><a href="#编辑mapred-site-xml" class="headerlink" title="编辑mapred-site.xml"></a>编辑mapred-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop1:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop1:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编辑yarn-site-xml"><a href="#编辑yarn-site-xml" class="headerlink" title="编辑yarn-site.xml"></a>编辑yarn-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.auxservices.mapreduce.shuffle.class<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop1:8032<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop1:8030<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop1:8031<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop1:8033<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop1:8088<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>把上面配置好的文件拷贝到2、3号机</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp -r <span class="hljs-regexp">/home/</span>hadoop hadoop2:<span class="hljs-regexp">/home/</span><br>scp -r <span class="hljs-regexp">/home/</span>hadoop hadoop3:<span class="hljs-regexp">/home/</span><br>scp -r <span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-regexp">/etc/</span>hadoop<span class="hljs-regexp">/ hadoop2:$HADOOP_HOME/</span>etc<span class="hljs-regexp">/hadoop/</span><br>scp -r <span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-regexp">/etc/</span>hadoop<span class="hljs-regexp">/ hadoop3:$HADOOP_HOME/</span>etc<span class="hljs-regexp">/hadoop/</span><br></code></pre></td></tr></table></figure><h2 id="（可选）增加sbin目录的环境变量，方便随意启动"><a href="#（可选）增加sbin目录的环境变量，方便随意启动" class="headerlink" title="（可选）增加sbin目录的环境变量，方便随意启动"></a>（可选）增加sbin目录的环境变量，方便随意启动</h2><ol><li><p>分别连接三台机器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it hadoop1 bash<br>docker <span class="hljs-built_in">exec</span> -it hadoop2 bash<br>docker <span class="hljs-built_in">exec</span> -it hadoop3 bash<br></code></pre></td></tr></table></figure></li><li><p>将hadoop&#x2F;sbin目录加入PATH环境变量中<code>vim ～/.bashrc</code></p><p>追加内容<code>export PATH=$PATH:$HADOOP_HOME/sbin</code></p><p>然后执行<code>source ~/.bashrc</code></p></li></ol><p><strong>这一步略过的话，启动hadoop的相关命令需要先<code>cd $HADOOP_HOME/sbin</code></strong></p><h2 id="启动HADOOP"><a href="#启动HADOOP" class="headerlink" title="启动HADOOP"></a>启动HADOOP</h2><p>进入hadoop1号主节点</p><p>第一次启动需要格式化hdfs，后续**<u>绝对不要再</u>**执行这一条<code>hdfs namenode -format</code></p><p>先在主节点上启动文件系统：<code>start-dfs.sh</code></p><p>使用<code>jps</code>命令此时可以观察到：</p><p>hadoop1上启动了<u>名称节点</u>和<u>第二名称节点</u>（第二名称节点可以配置在其他节点上）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@5d574541fd94:/opt/hadoop-3.1.3/etc/hadoop<span class="hljs-comment"># jps</span><br>1649 NameNode<br>1854 SecondaryNameNode<br>1967 Jps<br></code></pre></td></tr></table></figure><p>hadoop2和hadoop3上启动了<u>数据节点</u>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@004916b254fc:/opt/hadoop-3.1.3/etc/hadoop<span class="hljs-comment"># jps</span><br>294 DataNode<br>361 Jps<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@c5bea89663f9:/<span class="hljs-comment"># jps</span><br>279 Jps<br>188 DataNode<br></code></pre></td></tr></table></figure><p>第二步在主节点上启动yarn管理系统：<code>start-yarn.sh</code></p><p>Hadoop1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@5d574541fd94:/opt/hadoop-3.1.3/etc/hadoop<span class="hljs-comment"># jps</span><br>3751 Jps<br>3255 SecondaryNameNode<br>3049 NameNode<br>3455 ResourceManager<br></code></pre></td></tr></table></figure><p>Hadoop2和hadoop3:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@004916b254fc:/opt/hadoop-3.1.3/etc/hadoop<span class="hljs-comment"># jps</span><br>851 NodeManager<br>731 DataNode<br>975 Jps<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@c5bea89663f9:/<span class="hljs-comment"># jps</span><br>644 DataNode<br>890 Jps<br>766 NodeManager<br></code></pre></td></tr></table></figure><p>可以看到两台从节点都多了一个NodeManager</p><p>此时hadoop应用已经成功运行。</p><p>启动应用<u>不推荐</u>使用start-all</p><p>停止应用：<code>stop-dfs.sh</code>和<code>stop-yarn.sh</code>或者<code>stop-all.sh</code></p><blockquote><p>在hadoop运行中有哪个datanode掉了很正常🤣🤣</p><p>使用下面命令在数据节点上重开⬇️</p><p><code>hdfs --daemon start datanode</code></p></blockquote><p>在宿主机上可以通过IP:8088查看Hadoop运行状态。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>ubuntu</tag>
      
      <tag>hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>esxi安装黑群晖记录</title>
    <link href="/2022/10/02/esxi-an-zhuang-hei-qun-hui-ji-lu/"/>
    <url>/2022/10/02/esxi-an-zhuang-hei-qun-hui-ji-lu/</url>
    
    <content type="html"><![CDATA[<h1 id="esxi系统安装"><a href="#esxi系统安装" class="headerlink" title="esxi系统安装"></a>esxi系统安装</h1><p>用U盘刷好系统，具体省略</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>黑群晖镜像链接: <a href="https://pan.baidu.com/s/1ZOLCEvfAgF0tTZRkMt3MjA?pwd=ya4g">https://pan.baidu.com/s/1ZOLCEvfAgF0tTZRkMt3MjA?pwd=ya4g</a></p><p>其中不同镜像对应的就是不同的群晖硬件，我一开始使用的ds918+一直卡在最后一步安装失败，所以后面选用的<strong>ds2617xs</strong></p><p>镜像分为引导文件(.img)和系统安装包(.pat)，要下载好对应的版本</p><h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><p>最好准备一块以上未使用的硬盘，专门为黑群晖使用做数据盘，防止各种环节上出错</p><h2 id="img转vmdk"><a href="#img转vmdk" class="headerlink" title="img转vmdk"></a>img转vmdk</h2><h3 id="本地qemu工具转换"><a href="#本地qemu工具转换" class="headerlink" title="本地qemu工具转换"></a>本地qemu工具转换</h3><p>众所周知，esxi的系统需要单独制作vmdk文件</p><p>对于img文件，以Mac为例，使用常用的<code>qemu</code>工具转换</p><p>没安装qemu的先使用brew安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install qemu<br></code></pre></td></tr></table></figure><p>qemu转换img为vmdk的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-img convert -f raw name.img -O vmdk name.vmdk<br></code></pre></td></tr></table></figure><p>此时我们的vmdk<u>还不能在esxi上直接使用</u>，必须使用esxi的命令再转换一次</p><h3 id="上传到esxi系统转换"><a href="#上传到esxi系统转换" class="headerlink" title="上传到esxi系统转换"></a>上传到esxi系统转换</h3><ol><li><p><strong>右键主机-服务-启用安全Shell</strong>，打开esxi的ssh登陆，然后通过ssh登陆后台</p><p><img src="https://s2.loli.net/2022/10/02/945pvVtThizKP2n.png" alt="启动SSH"></p></li><li><p><strong>右键存储-浏览数据存储</strong> 点击上载，将本地的vmdk上传到esxi上</p></li><li><p>在ssh会话中找到上传的文件，<code>/vmfs/volumes/</code>下是硬盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /vmfs/volumes/datastore1/<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/10/02/tHPp8UrCVEAXMfF.png" alt="查看路径"></p></li><li><p>执行转换命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vmkfstools -<span class="hljs-selector-tag">i</span> ds3617<span class="hljs-selector-class">.vmdk</span> ds3617_esxi.vmdk<br></code></pre></td></tr></table></figure></li><li><p>最好做下备份，因为esxi删除虚拟机时会删除掉vmdk文件</p></li></ol><h1 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h1><ol><li>创建类型：新虚拟机</li><li>名称、兼容性：随便选一个linux</li><li>选择存储：装在系统盘上</li><li><strong>自定义设置</strong></li></ol><h2 id="自定义设置"><a href="#自定义设置" class="headerlink" title="自定义设置"></a>自定义设置</h2><p>CPU内存根据需要，我这里选择了2核4G，删除掉原本的硬盘1和SCSI控制器0、CD等选项</p><h3 id="添加SATA控制器"><a href="#添加SATA控制器" class="headerlink" title="添加SATA控制器"></a>添加SATA控制器</h3><p>添加其他设备- SATA控制器</p><h3 id="添加硬盘"><a href="#添加硬盘" class="headerlink" title="添加硬盘"></a>添加硬盘</h3><p>我添加一块现有硬盘和一块新标准硬盘</p><ul><li>现有硬盘，<strong>选择vmdk作为黑群晖的系统盘</strong>，保证其控制器位置是SATA控制器0，（0:0）表示最先启动的硬盘</li><li>新标准硬盘，<strong>作为黑群晖的数据盘</strong>。选择空硬盘分配全部大小上限，选择SATA控制器1，跟系统盘区分开</li><li>如果你有更多的硬盘可以继续添加，可以选择非0号的其他SATA控制器即可</li></ul><p>其余均作默认设置即可，不出意外的话就可以启动虚拟机了</p><h1 id="启动黑群晖虚拟机"><a href="#启动黑群晖虚拟机" class="headerlink" title="启动黑群晖虚拟机"></a>启动黑群晖虚拟机</h1><p>启动后在esxi中显示如图</p><blockquote><p>Loading Linux…</p><p>Starting kernel with SATA boot</p></blockquote><p><img src="https://s2.loli.net/2022/10/02/qSiyMOHnG5uLfmg.png" alt="启动成功"></p><p>此时需要通过路由器查看黑群晖获得的IP地址</p><p>或者使用群晖的SynologyAssistant软件搜索IP地址</p><blockquote><p>如果你的路由器没有开DHCP就必须使用软件搜索，找到之后设置静态路由地址，不过非常不推荐此处设置静态路由地址，因为后续黑群晖安装时会不断重启，丢失设置好的IP导致配置失败</p></blockquote><blockquote><p>如果在这一步搜索不到IP地址，可能是卡在内核启动了，原因可能很多，建议直接重装（</p></blockquote><p>访问IP地址的5005端口就可以开始配置黑群晖了！</p><p>PS：</p><p>如果等待10分钟倒计时后显示配置错误之类的，多次尝试无果的，多半是因为硬件和软件不匹配，建议更换镜像重新启动虚拟机。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>虚拟机</tag>
      
      <tag>esxi</tag>
      
      <tag>群晖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成模型之VAE</title>
    <link href="/2022/08/02/sheng-cheng-mo-xing-zhi-vae/"/>
    <url>/2022/08/02/sheng-cheng-mo-xing-zhi-vae/</url>
    
    <content type="html"><![CDATA[<h1 id="生成模型之variational-auto-encoder">生成模型之VariationalAuto-Encoder</h1><blockquote><p>本篇内容主要参考台大李宏毅教授的视频，作为笔记使用</p><p><a href="https://www.youtube.com/watch?v=3oHlf8-J3Nc">【機器學習2021】自編碼器(Auto-encoder) (上) - 基本概念</a></p><p><a href="https://www.youtube.com/watch?v=8zomhgKrsmQ">ML Lecture 18:Unsupervised Learning - Deep Generative Model (Part II)</a></p></blockquote><h1 id="auto-encoder自动编码器">Auto-Encoder自动编码器</h1><aside>💡 可以认为是自监督学习的一种方法，不需要标注</aside><h2 id="压缩自动编码器">压缩自动编码器</h2><pre class="mermaid">graph LR   高维图片 --> NN-Encoder --> 低维向量 --> NN-Decoder--> 生成图 --越接近越好-->高维图片</pre><h2 id="降噪自动编码器">降噪自动编码器</h2><pre class="mermaid">graph LR  原图.-原图+噪声    原图+噪声 --> NN-Encoder --> 低维向量 --> NN-Decoder--> 生成图 --与原图越接近越好-->原图</pre><h2 id="解缠feature-disentangle">解缠（Feature Disentangle）</h2><p>输入信息常常由各种信息纠缠在一起，如</p><ul><li>图片中存在物体、纹理</li><li>声音中存在文本内容、说话人信息</li><li>一句话包含格式、语法</li><li>……</li></ul><p>这时候需要通过解缠得到不同维度包含的信息</p><p>应用：Voice Conversion语者转换</p><h1 id="vae变分自动编码器">VAE变分自动编码器</h1><h2 id="ae和vae区别">AE和VAE区别</h2><p>Auto-encoder</p><pre class="mermaid">graph LR  高维图片 --> NN-Encoder --> 低维向量 --> NN-Decoder--> 生成图</pre><p>VAE</p><p>是在自动编码器的基础上做变分处理，使编码器的输出为目标分布的均值方差。</p><pre class="mermaid">graph LR  input --> NN-Encoder --> mu    NN-Encoder --> sigma    sigma --exp--> times((相乘))    e --> times    mu --> plus((相加))    times -->plus    plus --> z --> NN-Decoder--> output</pre><p>其中mu、sigma、e、z均为向量，并且e内元素服从正态分布，<span class="math inline">\(z_i=\exp(\sigma_i)\times e_i + \mu_i\)</span></p><p>mu是均值，e是噪声，sigma代表噪声的大小即variance方差，z就是目标概率分布。为避免variance方差被生成为0，即没有噪声，需要加上限制条件。</p><p>所以需要最小化如下函数：</p><p><span class="math display">\[\min \sum \limits _{i=1} ^n (\exp(\sigma_i)-(1+\sigma_i)+\mu_i^2)\]</span></p><h2 id="vae推导">VAE推导</h2><h3 id="高斯混合模型gmm">高斯混合模型（GMM）</h3><blockquote><p>部分内容参考</p><p><a href="http://www.gwylab.com/note-vae.html">【学习笔记】生成模型--变分自编码器</a></p></blockquote><p>高斯混合模型是单一高斯概率密度函数的延伸，由于GMM能够平滑的近似任意形状的密度分布，因此常用在语音领域。</p><p>GMM的工作就是将复杂的P(x)分布变为多个高斯分布的混合，当拆分的越多时，越接近原始P(x)分布。</p><figure><img src="https://s2.loli.net/2022/08/02/JBOLqVHPE9yYFmQ.png" alt="高斯混合模型离散变量"><figcaption aria-hidden="true">高斯混合模型离散变量</figcaption></figure><p><u>如果用每一组高斯分布的取值作为一个维度，就可以用m表示第几个维度，如果有512维，m的取值就是1,2,3……512</u></p><p>从多项式分布P(m)中采样一个整数m，表示一个高斯分布<span class="math inline">\(N(\mu^m,\sigma^m)\)</span>，P(x)可表示为所有这些高斯分布的和：</p><p><span class="math display">\[P(x)=\sum \limits _mP(m)P(x|m)\]</span></p><p>其中，<span class="math inline">\(m\sim P(m)\)</span>，<span class="math inline">\(x|m \sim N(\mu^m,\sigma^m)\)</span></p><p>不过这种混合方式是离散的，还存在失真的地方，于是我们将其转化为连续的。</p><figure><img src="https://s2.loli.net/2022/08/02/zrjWQXFZgGVYfRP.png" alt="高斯混合模型连续变量"><figcaption aria-hidden="true">高斯混合模型连续变量</figcaption></figure><p>现在将离散变量m改为连续变量z，依旧是z的某一个取值对应一个高斯分布。</p><aside>💡与离散的GMM不同点在于，此时我们不能直接得到z所对应的高斯分布的均值和方差，因为z有无数个取值无法穷尽。</aside><p><span class="math inline">\(z\sim N(0,I)\)</span>，<span class="math inline">\(x|z\sim N(\mu(z),\sigma(z))\)</span>，其中<span class="math inline">\(\mu\)</span>是得到z均值的函数，<span class="math inline">\(\sigma\)</span>是得到z方差的函数。</p><p>于是P(x)的分布就可以表示为:</p><p><span class="math display">\[P(x)=\int\limits _zP(z)P(x|z)dz\]</span></p><p>所以我们的目标就变成求解上面这个公式。</p><h3 id="求解目标公式">求解目标公式</h3><p><span class="math display">\[P(x)=\int\limits _zP(z)P(x|z)dz\]</span></p><p>其中<span class="math inline">\(P(z)\)</span>已知，<span class="math inline">\(P(x|z)\)</span>未知，<span class="math inline">\(P(x|z)\)</span>中<span class="math inline">\(x|z\simN(\mu(z),\sigma(z))\)</span>，所以求<strong>解<span class="math inline">\(P(x|z)\)</span>转换为求解<span class="math inline">\(\mu,\sigma\)</span>两个函数的表达式</strong>。</p><p><strong>如何求解<span class="math inline">\(\mu,\sigma\)</span>函数?使用神经网络!</strong></p><pre class="mermaid">graph LR    z --> NN-Decoder --> mu    NN-Decoder --> sigma</pre><p>同时我们再加上一个<strong>新的函数<span class="math inline">\(q(z|x)\)</span></strong>用来表示任意高斯分布，其中<span class="math inline">\(z|x \simN(\mu&#39;(x),\sigma&#39;(x))\)</span>，表示对于一个输入的x，能够得到一对均值和方差，用于生成z的概率分布。</p><pre class="mermaid">graph LR  x --> NN-Encoder --> mu'    NN-Encoder --> sigma'</pre><p>因为实际上我们有数据x，现在是在求解参数，所以需要求<span class="math inline">\(P(x)\)</span>的最大似然函数<span class="math inline">\(L=\sum \limits _x \log P(x)\)</span></p><ul><li><strong>最大似然估计(MLE):</strong>在”模型已定,参数<span class="math inline">\(\theta\)</span>未知”的情况下,通过观测数据来估计未知参数<span class="math inline">\(\theta\)</span>的一种方法,要求所有采样都是独立同分布.<ul><li>Note:最大似然估计的使用<ol type="1"><li>写出似然函数</li><li>对似然函数取对数</li><li>两边同时求导(多个变量就求偏导)</li><li>令导数为0,解出似然方程</li></ol><ul><li><p>例子</p><figure><img src="/2022/08/02/sheng-cheng-mo-xing-zhi-vae/Untitled.png" alt="最大似然函数例题"><figcaption aria-hidden="true">最大似然函数例题</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/02/X48H3Blukqw15Op.png" alt="例题解答"><figcaption aria-hidden="true">例题解答</figcaption></figure></li></ul></li></ul></li></ul><p>由于<span class="math inline">\(q(z|x)\)</span>是一个任意的高斯分布，于是有<span class="math inline">\(\int \limits _zq(z|x)dz=1\)</span>，表示整个高斯分布的面积为1。</p><p><span class="math display">\[\begin{aligned}\log P(x) &amp;=\int \limits _zq(z|x)\log P(x)dz \\ &amp;=\int \limits_zq(z|x)\log \big(\frac{P(x|z)P(z)}{P(z|x)}\big)dz \\&amp;=\int \limits _zq(z|x)\log(\frac{P(x|z)P(z)}{q(z|x)}\cdot\frac{q(z|x)}{p(z|x)})dz \\&amp;= \int \limits _zq(z|x)\log(\frac{P(x|z)P(z)}{q(z|x)})dz + \int\limits _zq(z|x)\log(\frac{q(z|x)}{P(z|x)})dz \\&amp;= \int \limits _zq(z|x)\log(\frac{P(x|z)P(z)}{q(z|x)})dz+KL(q(z|x)||P(z|x))\end{aligned}\]</span></p><p>最后得到两项，第二项KL散度非负，所以第一项就是结果的下界<span class="math inline">\(L_b\)</span></p><p><span class="math display">\[\log P(x) \geqslant \int \limits _zq(z|x)\log(\frac{P(x|z)P(z)}{q(z|x)})dz\]</span></p><p><span class="math display">\[\log P(x) = L_b+KL(q(z|x)||P(z|x))\]</span></p><p>这里将原本的问题：求<span class="math inline">\(P(x|z)\)</span>使得<span class="math inline">\(\log P(x)\)</span>最大化</p><p>转换为了<strong>新的问题</strong>：<strong>求P(x|z)和q(z|x)使得<span class="math inline">\(\log P(x)\)</span>最大化</strong></p><p>看起来像是多了一个<span class="math inline">\(q(z|x)\)</span>，其实不然，我们开始观察<span class="math inline">\(\log P(x)\)</span>跟这两项的关系：</p><figure><img src="https://s2.loli.net/2022/08/02/CZJpxOlEad8nNh3.jpg" alt="logP(x)和新问题的关系"><figcaption aria-hidden="true">logP(x)和新问题的关系</figcaption></figure><p>根据<span class="math inline">\(P(x)=\int\limits_zP(z)P(x|z)dz\)</span>:</p><p>当我们保持<span class="math inline">\(P(x|z)\)</span>不变时，<span class="math inline">\(P(z)\)</span>不会变，<span class="math inline">\(P(x)\)</span>也不会变，<span class="math inline">\(\log P(x)\)</span>也不会变</p><p>再根据<span class="math inline">\(\log P(x) =L_b+KL(q(z|x)||P(z|x))\)</span>：</p><p>整个<span class="math inline">\(\log P(x)\)</span>的大小不变，<span class="math inline">\(L_b\)</span>越大，KL散度越小，当KL散度减小到零时，<span class="math inline">\(\log P(x)=L_b\)</span>，<strong>而<span class="math inline">\(L_b\)</span>此时只和<span class="math inline">\(q(z|x)\)</span>有关。</strong></p><p>此时我们发现：</p><p>求<span class="math inline">\(\max \log P(x)\)</span>等价于求<span class="math inline">\(\max L_b\)</span></p><aside>💡 宏观上我们可以将此时的VAE理解为两个部分： 调节<span class="math inline">\(P(x|z)\)</span>，就是在调节NN-Decoder 调节<span class="math inline">\(q(z|x)\)</span>，就是在调节NN-Encoder</aside><blockquote><p>VAE算法：Decoder每改进一次，Encoder就调节成与其一致，利用约束条件逼迫Decoder前进</p></blockquote><p>开始求解<span class="math inline">\(\max L_b\)</span></p><p><span class="math display">\[\begin{aligned}L_b &amp;= \int \limits _zq(z|x)\log (\frac {P(x|z)P(z)}{q(z|x)})dz \\&amp;= \int \limits _zq(z|x)\log (\frac {P(z)}{q(z|x)})dz + \int \limits_zq(z|x)\log P(x|z)dz \\&amp;=-KL(q(z|x)||P(z))+\int \limits _zq(z|x)\log P(x|z)dz\end{aligned}\]</span></p><p>记第一项为A，第二项为B，现在求解<span class="math inline">\(L_b\)</span>的最大值，需要求A的最大值（KL散度的最小值），B的最大值</p><p>展开A后可以得到约束项：<span class="math inline">\(\min \sum \limits_{i=1} ^n(\exp(\sigma_i)-(1+\sigma_i)+\mu_i^2)\)</span>，证明方法来自VAE原论文《Auto-EncodingVariational Bayes》</p><p>求B的最大值：</p><p><span class="math display">\[\max B = \max E_{q(z|x)}[\log P(x|z)]\]</span></p><p>可理解为<strong>提供一个x的值，在<span class="math inline">\(q(z|x)\)</span>这个分布下，让<span class="math inline">\(\logP(x|z)\)</span>值越大越好，这件事情就是NN-Encoder在做的。</strong></p><pre class="mermaid">graph LR  x --> NN-Encoder --> mu'    NN-Encoder --> sigma'    mu'-->z    sigma'-->z    z-->NN-Decoder-->mu    NN-Decoder-->sigma    mu .-越接近越好.-> x</pre><p>VAE的损失函数的两部分，一是重建损失，二是约束项。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DL</tag>
      
      <tag>VAE</tag>
      
      <tag>生成模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo安装和配置插件</title>
    <link href="/2022/08/01/hexo-an-zhuang-he-pei-zhi-cha-jian/"/>
    <url>/2022/08/01/hexo-an-zhuang-he-pei-zhi-cha-jian/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo安装和配置插件"><a href="#Hexo安装和配置插件" class="headerlink" title="Hexo安装和配置插件"></a>Hexo安装和配置插件</h1><aside>💡 本文安装配置了hexo博客的常用插件，包括pandoc、mermaid、本地图片等插件</aside><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装node环境"><a href="#安装node环境" class="headerlink" title="安装node环境"></a>安装node环境</h2><p>可以直接在nodejs官网下载安装包</p><h2 id="准备路径后安装hexo"><a href="#准备路径后安装hexo" class="headerlink" title="准备路径后安装hexo"></a>准备路径后安装hexo</h2><p>在想要安装node的路径下建立一个新的文件夹，避免装在根目录下</p><p>在新的文件夹下执行命令安装hexo</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo<br></code></pre></td></tr></table></figure><p>测试hexo命令</p><h1 id="安装各种插件"><a href="#安装各种插件" class="headerlink" title="安装各种插件"></a>安装各种插件</h1><h2 id="pandoc渲染latex公式"><a href="#pandoc渲染latex公式" class="headerlink" title="pandoc渲染latex公式"></a>pandoc渲染latex公式</h2><p>先在官网安装pandoc的包</p><p><a href="https://pandoc.org/installing.html">Installing pandoc</a></p><p>再执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-renderer-pandoc --save<br></code></pre></td></tr></table></figure><h2 id="安装mermaid流程图插件"><a href="#安装mermaid流程图插件" class="headerlink" title="安装mermaid流程图插件"></a>安装mermaid流程图插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-filter-mermaid-diagrams<br></code></pre></td></tr></table></figure><p>安装后不能直接使用，需要修改部分文件，修改内容如下</p><p>参考文章：</p><p><a href="https://ash-one.github.io/2022/07/12/hexo-bo-ke-zai-matery-zhu-ti-xia-cha-ru-mermaid-liu-cheng-tu/">Hexo博客在matery主题下插入mermaid流程图</a></p><h2 id="安装支持本地图片的插件"><a href="#安装支持本地图片的插件" class="headerlink" title="安装支持本地图片的插件"></a>安装支持本地图片的插件</h2><ol><li><p>插件安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-asset-image --save<br></code></pre></td></tr></table></figure></li><li><p>由于插件内容老旧失效，找到文件进行修改</p><p> 位置在&#x2F;node_modules&#x2F;hexo-asset-image&#x2F;index.js</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPosition</span>(<span class="hljs-params">str, m, i</span>) &#123;<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">split</span>(m, i).<span class="hljs-title function_">join</span>(m).<span class="hljs-property">length</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> version = <span class="hljs-title class_">String</span>(hexo.<span class="hljs-property">version</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>  <span class="hljs-keyword">var</span> config = hexo.<span class="hljs-property">config</span>;<br>  <span class="hljs-keyword">if</span>(config.<span class="hljs-property">post_asset_folder</span>)&#123;<br>    <span class="hljs-keyword">var</span> link = data.<span class="hljs-property">permalink</span>;<br><span class="hljs-keyword">if</span>(version.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title class_">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>   <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>   <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="hljs-keyword">var</span> endPos = link.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br>    link = link.<span class="hljs-title function_">substring</span>(beginPos, endPos);<br><br>    <span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.<span class="hljs-property">length</span>; i++)&#123;<br>      <span class="hljs-keyword">var</span> key = toprocess[i];<br> <br>      <span class="hljs-keyword">var</span> $ = cheerio.<span class="hljs-title function_">load</span>(data[key], &#123;<br>        <span class="hljs-attr">ignoreWhitespace</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">xmlMode</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">lowerCaseTags</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">false</span><br>      &#125;);<br><br>      $(<span class="hljs-string">&#x27;img&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;<br><span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="hljs-keyword">var</span> src = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.<span class="hljs-title function_">test</span>(src) &amp;&amp;<br>   !<span class="hljs-regexp">/^\s*\//</span>.<span class="hljs-title function_">test</span>(src)) &#123;<br>  <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>  <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>  <span class="hljs-keyword">var</span> linkArray = link.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">var</span> srcArray = src.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">if</span>(srcArray.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>)<br>srcArray.<span class="hljs-title function_">shift</span>();<br>  src = srcArray.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>  $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, config.<span class="hljs-property">root</span> + link + src);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.<span class="hljs-property">root</span> + link + src);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span>&amp;&amp;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>($(<span class="hljs-variable language_">this</span>));<br>&#125;<br>      &#125;);<br>      data[key] = $.<span class="hljs-title function_">html</span>();<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>打开hexo配置文件_config.yml，找到这个配置项开启功能，目的是在每次使用hexo new生成新博客时，自动生成一个同名的目录存放静态文件</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><p>可以生成测试是否能正常加载blog中的本地图片</p><p>如果没能正确生成可以使用命令清理文件重新编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://juejin.cn/post/7006594302604214280">解决hexo引用本地图片无法显示的问题 - 掘金</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>blog</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apple Silicon MacBook Pro新机配置</title>
    <link href="/2022/07/31/apple-silicon-macbook-pro-xin-ji-pei-zhi/"/>
    <url>/2022/07/31/apple-silicon-macbook-pro-xin-ji-pei-zhi/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录下由intel转移到m1的过程中重装各种环境和工具的命令和配置</p></blockquote><aside>💡 第一次使用苹果的time machine进行迁移，给我的感觉就像把旧电脑的硬盘直接摆在面前一样，迁移文件很好用  </aside><h1 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h1><p>mac自带git，所以只需要配置下用户名和邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;John Doe&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;johndoe@example.com&quot;</span><br></code></pre></td></tr></table></figure><h1 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h1><p><a href="https://brew.sh/index_zh-cn">Homebrew</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>根据返回的最后内容执行提示的代码，将brew添加到path中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27;</span> &gt;&gt; /Users/ashone/.zprofile<br></code></pre></td></tr></table></figure><p>最后在终端中输入brew测试是否添加成功</p><h1 id="安装iTerm2"><a href="#安装iTerm2" class="headerlink" title="安装iTerm2"></a>安装iTerm2</h1><p><a href="https://iterm2.com/index.html">iTerm2 - macOS Terminal Replacement</a></p><h1 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h1><p><a href="https://ohmyz.sh/#install">Oh My Zsh - a delightful &amp; open source framework for Zsh</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><h1 id="安装zsh主题"><a href="#安装zsh主题" class="headerlink" title="安装zsh主题"></a>安装zsh主题</h1><p>我选择安装powerlevel10k主题，链接在这里<a href="https://github.com/romkatv/powerlevel10k">https://github.com/romkatv/powerlevel10k</a></p><ol><li><p>安装字体（可跳过）</p><p> <a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf">MesloLGS NF Regular.ttf</a></p><p> <a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf">MesloLGS NF Bold.ttf</a></p><p> <a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf">MesloLGS NF Italic.ttf</a></p><p> <a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf">MesloLGS NF Bold Italic.ttf</a></p></li><li><p>手动安装主题文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-<span class="hljs-variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br></code></pre></td></tr></table></figure></li><li><p>编辑配置文件，修改主题为10k</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">code ~/.zshrc<br></code></pre></td></tr></table></figure><p> 也可以使用其他编辑器打开这个文件</p><p> 然后找到第11行修改主题为</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">powerlevel10k/powerlevel10k<br></code></pre></td></tr></table></figure></li><li><p>重启iterm，加载主题文件</p><p> <img src="/Apple-Silicon-MacBook-Pro%E6%96%B0%E6%9C%BA%E9%85%8D%E7%BD%AE/Untitled.png"></p></li><li><p>依次根据样式进行配置</p></li><li><p>重启iterm就可以看到崭新的主题了</p></li></ol><h1 id="安装oh-my-zsh自动补全插件"><a href="#安装oh-my-zsh自动补全插件" class="headerlink" title="安装oh-my-zsh自动补全插件"></a>安装oh-my-zsh自动补全插件</h1><p><a href="https://github.com/zsh-users/zsh-autosuggestions">GitHub - zsh-users&#x2F;zsh-autosuggestions: Fish-like autosuggestions for zsh</a></p><ol><li><p>下载插件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure></li><li><p>编辑zshrc配置文件，增加插件，修改配色</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">code ~/.zshrc<br></code></pre></td></tr></table></figure> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile">plugins=( <br>    <span class="hljs-comment"># other plugins...</span><br>    zsh-autosuggestions<br>)<br><span class="hljs-comment"># 此处修改autosuggestions插件的配色</span><br>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=<span class="hljs-string">&quot;fg=#d0d0d0,underline&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>重开iterm</p></li></ol><p>查看效果：</p><p><img src="/Apple-Silicon-MacBook-Pro%E6%96%B0%E6%9C%BA%E9%85%8D%E7%BD%AE/Untitled%201.png"></p><h1 id="配置python和conda"><a href="#配置python和conda" class="headerlink" title="配置python和conda"></a>配置python和conda</h1><p><a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda - Conda documentation</a></p><h2 id="安装miniconda对应版本的pkg，双击后直接安装，在终端测试conda命令是否正常"><a href="#安装miniconda对应版本的pkg，双击后直接安装，在终端测试conda命令是否正常" class="headerlink" title="安装miniconda对应版本的pkg，双击后直接安装，在终端测试conda命令是否正常"></a>安装miniconda对应版本的pkg，双击后直接安装，在终端测试conda命令是否正常</h2><h2 id="查看conda环境-创建新python环境"><a href="#查看conda环境-创建新python环境" class="headerlink" title="查看conda环境, 创建新python环境"></a>查看conda环境, 创建新python环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> list<br>conda create -n your_env_name python=x.x<br><br>conda activate dl<br>conda deactivate<br></code></pre></td></tr></table></figure><h1 id="安装pytorch（Apple-Silicon版本）"><a href="#安装pytorch（Apple-Silicon版本）" class="headerlink" title="安装pytorch（Apple Silicon版本）"></a>安装pytorch（Apple Silicon版本）</h1><p><a href="https://pytorch.org/">PyTorch</a></p><p><img src="/Apple-Silicon-MacBook-Pro%E6%96%B0%E6%9C%BA%E9%85%8D%E7%BD%AE/Untitled%202.png"></p><p>pytorch从1.13版本开始支持苹果芯片gpu加速,目前（7.30）还得安装nightly版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install pytorch -c pytorch-nightly<br></code></pre></td></tr></table></figure><p>用python测试查看版本号，torch版本为1.13开发版就代表安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ python<br>Python 3.8.13 (default, Mar 28 2022, 06:13:39)<br>[Clang 12.0.0 ] :: Anaconda, Inc. on darwin<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; import torch<br>&gt;&gt;&gt; torch.__version__<br><span class="hljs-string">&#x27;1.13.0.dev20220729&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Apple</tag>
      
      <tag>配置</tag>
      
      <tag>conda</tag>
      
      <tag>zsh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神经网络中的优化算法和正则化问题</title>
    <link href="/2022/07/31/shen-jing-wang-luo-zhong-de-you-hua-suan-fa-he-zheng-ze-hua-wen-ti/"/>
    <url>/2022/07/31/shen-jing-wang-luo-zhong-de-you-hua-suan-fa-he-zheng-ze-hua-wen-ti/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要参考邱锡鹏老师的nndl-book，作为笔记使用</p><p><a href="https://www.bilibili.com/video/BV19u411d7r3">神经网络与深度学习（第7-10讲）（更新至：第9讲 无监督学习）_哔哩哔哩_bilibili</a></p></blockquote><h1 id="非凸优化问题"><a href="#非凸优化问题" class="headerlink" title="非凸优化问题"></a>非凸优化问题</h1><p>高维空间中常常遇到的都是非凸函数</p><p>非凸优化问题中难点有：</p><ul><li>如何逃离鞍点</li><li>会出现平坦最小值</li></ul><h2 id="鞍点"><a href="#鞍点" class="headerlink" title="鞍点"></a>鞍点</h2><p>在某些维度上是最高点,另一些维度上是最低点.其一阶导数为0,二阶梯度Hessian矩阵不是半正定矩阵.</p><p><img src="/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E5%92%8C%E6%AD%A3%E5%88%99%E5%8C%96%E9%97%AE%E9%A2%98/Untitled.png" alt="鞍点示例"></p><h2 id="平坦最小值"><a href="#平坦最小值" class="headerlink" title="平坦最小值"></a>平坦最小值</h2><blockquote><p>由于DL中的参数非常多且具有冗余,单个参数对最终的损失影响比较小,这会导致损失函数在局部最小解附近通常是一个平坦的区域</p></blockquote><p><img src="/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E5%92%8C%E6%AD%A3%E5%88%99%E5%8C%96%E9%97%AE%E9%A2%98/Untitled%201.png" alt="平坦最小值和尖锐最小值"></p><ul><li>一个平坦最小值的邻域内,所有点对应的训练损失都比较接近</li><li>大部分局部最小解是等价的</li><li>局部最小解对应的训练损失有可能非常接近于全局最小解训练损失</li></ul><aside>💡 在训练神经网络时,可以用局部最小解代替全局最优解,以防止过拟合,鲁棒性更好</aside># 神经网络优化算法<h2 id="随机梯度下降法-SGD"><a href="#随机梯度下降法-SGD" class="headerlink" title="随机梯度下降法(SGD)"></a>随机梯度下降法(SGD)</h2><p>小批量随机梯度下降,每次选择k个样本计算偏导数的平均数,然后在梯度反向上更新参数</p><h2 id="批量大小调整"><a href="#批量大小调整" class="headerlink" title="批量大小调整"></a>批量大小调整</h2><p>不影响梯度的期望,但会影响方差.</p><ul><li><p>batch越大,方差越小,学习率需要设置较大</p></li><li><p>batch越小,需要设置较小的学习率,否则模型不会收敛</p></li><li><p>NOTE:batch和学习率可遵守线性缩放原则</p><p>  batch变为m倍,学习率变为$1&#x2F;m$</p></li></ul><aside>💡 batch越大通常训练的效率越高,batch越小由于随机性更高,可能会获得更好的泛化能力  </aside>## 梯度估计修正<ul><li><p>Momentum Method 动量法</p><p>  用之前累积的动量来代替真正的梯度（负梯度的加权移动平均）</p>  <aside>  💡 每次的迭代方向相当于加速度，类似二阶梯度    </aside>  <p>  参数更新的差值为：</p><p>  $$<br>  \Delta \theta_t &#x3D;\rho \Delta \theta_{t-1}-\alpha g_t&#x3D;-\alpha \sum \limits <em>{\tau&#x3D;1}^{t} \rho^{t-\tau}g</em>{\tau}<br>  $$</p></li><li><p>Nesterov 加速梯度</p></li><li><p>梯度截断</p><p>  当某个时刻梯度（的模）过大如NaN，就把梯度的模限定在某个区间，将超过区间的部分进行截断</p><ul><li><p>按值截断</p><p>  例如取$[a,b]$区间的值</p><p>  $$<br>  g_t&#x3D;\max(\min(g_t,b),a)<br>  $$</p></li><li><p>按模截断</p><p>  把模的最大值限定为b</p><p>  $$<br>  g_t&#x3D;\frac{b}{||g_t||}g_t<br>  $$</p></li></ul></li><li><p>Adam算法</p><p>  使用动量法优化梯度，加上RMSprop自适应调整学习率</p><p>  先计算两个移动平均：</p><p>  $$<br>  M_t &#x3D; \beta <em>1M</em>{t-1}+(1-\beta_1)g_t<br>  $$</p><p>  $$<br>  G_t &#x3D; \beta_2G_{t-1}+(1-\beta_2)g_t \odot g_t<br>  $$</p><p>  当t&#x3D;1时，$M_1$应该等于$g_1$，但是在上述公式中不正确，于是加入偏差修正如下：</p><p>  $$<br>  \hat M_t &#x3D; \frac {M_t}{1-\beta_1^t}<br>  $$</p><p>  $$<br>  \hat G_t&#x3D;\frac{G_t}{1-\beta_2^t}<br>  $$</p><p>  更新参数内容：</p><p>  $$<br>  \Delta \theta_t &#x3D; - \frac{\alpha}{\sqrt {G_t+\epsilon}}\hat M_t<br>  $$</p></li></ul><h2 id="学习率调整"><a href="#学习率调整" class="headerlink" title="学习率调整"></a>学习率调整</h2><ul><li><p>学习率衰减</p><ul><li>阶梯衰减</li><li>逆时衰减:$\alpha_t &#x3D; \alpha_0 \frac{1}{1+\beta \times t}$</li><li>指数衰减</li><li>余弦衰减</li></ul></li><li><p>周期性学习率调整</p><p>  <img src="/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E5%92%8C%E6%AD%A3%E5%88%99%E5%8C%96%E9%97%AE%E9%A2%98/Untitled%202.png" alt="周期性学习率调整"></p><p>  跳出局部最优或鞍点的情况,找到更平坦的局部最优</p></li><li><p>学习率预热</p><p>  <img src="/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E5%92%8C%E6%AD%A3%E5%88%99%E5%8C%96%E9%97%AE%E9%A2%98/Untitled%203.png" alt="学习率预热示例"></p></li><li><p>AdaGrad算法</p><p>  借鉴L2正则化的思想，在第t次迭代的时候，先计算每个参数梯度平方的累计值。</p><p>  $$<br>  G_t&#x3D;\sum \limits <em>{\tau}^{t}g</em>{\tau}\odot g_{\tau}<br>  $$</p><p>  参数更新的差值为：</p><p>  $$<br>  \Delta \theta _{t} &#x3D; - \frac {\alpha}{\sqrt {G_t+\epsilon}}\odot g_t<br>  $$</p><p>  其中$\alpha$是初始学习率，$\epsilon$是为保持数值稳定一个小常数（大小通常是$e^{-7}\sim e^{-10}$），公式内的运算都是按元素进行的操作。</p><blockquote><p>from nndl-book:</p><p>在 AdaGrad 算法中，如果某个参数的偏导数累积比较大，其学习率相对较小;相反，如果其偏导数累积较小，其学习率相对较大.但整体是随着迭代次数的增加，学习率逐渐缩小.<br>AdaGrad 算法的缺点是在经过一定次数的迭代依然没有找到最优点时，由于这时的学习率已经非常小，很难再继续找到最优点.</p></blockquote></li><li><p>RMSprop算法</p><p>  避免AdaGrad算法中学习率不断单调下降导致过早衰减的问题。</p><p>  参数更新的差值和AdaGrad算法是相同的：</p><p>  $$<br>  \Delta \theta _{t} &#x3D; - \frac {\alpha}{\sqrt {G_t+\epsilon}}\odot g_t<br>  $$</p><p>  区别在于计算$G_t$:</p><p>  $$<br>  \begin{aligned}<br>  G_{t} &amp;&#x3D;\beta G_{t-1}+(1-\beta) \boldsymbol{g}<em>{t} \odot \boldsymbol{g}</em>{t} \<br>  &amp;&#x3D;(1-\beta) \sum_{\tau&#x3D;1}^{t} \beta^{t-\tau} \boldsymbol{g}<em>{\tau} \odot \boldsymbol{g}</em>{\tau}<br>  \end{aligned}<br>  $$</p><p>  由于参数的学习率变化由单调衰减变成了指数加权的移动平均，既可以变大也可以变小。</p></li><li><p>AdaDelta算法</p><p>  参数更新的差值为：</p><p>  $$<br>  \Delta \theta_{t}&#x3D;-\frac{\sqrt{\Delta X_{t-1}^{2}+\epsilon}}{\sqrt{G_{t}+\epsilon}} \mathbf{g}_{t}<br>  $$</p><p>  其中$G_t$和RMSprop算法相同：</p><p>  $$<br>  \begin{aligned}<br>  G_{t} &amp;&#x3D;\beta G_{t-1}+(1-\beta) \boldsymbol{g}<em>{t} \odot \boldsymbol{g}</em>{t} \<br>  &amp;&#x3D;(1-\beta) \sum_{\tau&#x3D;1}^{t} \beta^{t-\tau} \boldsymbol{g}<em>{\tau} \odot \boldsymbol{g}</em>{\tau}<br>  \end{aligned}<br>  $$</p><p>  分子上：</p><p>  $$<br>  \Delta X_{t-1}^{2}&#x3D;\beta_{1} \Delta X_{t-2}^{2}+\left(1-\beta_{1}\right) \Delta \theta_{t-1} \odot \Delta \theta_{t-1}<br>  $$</p><p>  其中$\beta _1$是衰减率</p><p>  由于将原本的学习率修改为了带衰减率的移动平均，能够抑制住学习率的波动。</p></li></ul><h2 id="参数初始化"><a href="#参数初始化" class="headerlink" title="参数初始化"></a>参数初始化</h2><p>当使用梯度下降法优化网络参数时，参数的初始值非常重要，直接影响到网络的优化效率和泛化能力</p><p>神经网络的参数不能初始化为0，会出现对称权重问题，导致层内所有权重相同。</p><p>因此对于参数的初始化也有许多方法。</p><ul><li>预训练初始化</li><li>随机初始化<ul><li><p>基于固定方差的参数初始化</p><ul><li><p>高斯分布初始化</p><p>  使用方差和均值的高斯分布</p></li><li><p>均匀分布初始化</p><p>  采用在区间$[-r,r]$内采用均匀分布进行初始化</p></li></ul></li><li><p>基于方差缩放的参数初始化</p><p>   $M_l$是第$l$层的神经元个数</p><p>  <img src="/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E5%92%8C%E6%AD%A3%E5%88%99%E5%8C%96%E9%97%AE%E9%A2%98/Untitled%204.png" alt="基于方差缩放的参数初始化设置"></p></li><li><p>正交初始化</p><p>  由于上述两种初始化对每个参数都是独立采样，依旧存在梯度消失或梯度爆炸问题。</p><p>  此处我们从最开始就构建一个L层的等宽线性网络：</p><p>  $$<br>  \bold y&#x3D; \bold W^L \bold W^{L-1} \dots \bold W^1 \bold x<br>  $$</p><p>  在反向传播中误差项$\delta$的反向传播公式为：$\delta ^{l-1}&#x3D;(W^l)^T\delta ^l$</p><p>  <strong>范数保持性：</strong>指误差项在反向传播中的范数保持不变，满足$||\delta^{l-1}||^2&#x3D;||\delta^l||^2&#x3D;||(W^l)^T\delta^l||^2$。</p><p>  于是在初始化就可以使用均值为0，方差为$1&#x2F;M$的高斯分布来做初始化</p><hr><p>  或者采用更直接的方式：直接将 $W^l$初始化为正交矩阵，即$W^l(W^l)^T&#x3D;I$</p><ol><li>y地方用均值为0，方差为1的高斯分布初始化一个矩阵</li><li>将这个矩阵用奇异值分解得到两个正交矩阵，用其中之一作为权重矩阵</li></ol>  <aside>  💡 正交初始化通常用在RNN的循环边上的权重矩阵    </aside></li></ul></li></ul><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="尺度不变性（Scale-Invariance）"><a href="#尺度不变性（Scale-Invariance）" class="headerlink" title="尺度不变性（Scale Invariance）"></a>尺度不变性（Scale Invariance）</h3><p>对于机器算法中的数据，在缩放部分特征或者全部特征后，不影响学习和预测。</p><p>例如：将厘米单位的特征，缩放为毫米单位。</p><p><em>NOTE:KNN算法的尺度不变性较差，因为其计算的欧式距离对数据要求高</em></p><p>不同输入特征的尺度差异较大会带来两个问题：</p><ol><li>参数初始化困难</li><li>优化效率较低</li></ol><h3 id="归一化（规范化-Normalization）"><a href="#归一化（规范化-Normalization）" class="headerlink" title="归一化（规范化 Normalization）"></a>归一化（规范化 Normalization）</h3><ul><li><p><strong>最小最大值规范化</strong>：</p><p>  找到数据中的最小最大值，将所有数据缩放到这个范围内</p></li><li><p><strong>标准化（Z值规范化）</strong>：</p><p>  对每一维数据计算均值和方差</p><p>  $$<br>  \mu &#x3D; \frac{1}{N} \sum \limits _{n&#x3D;1}^Nx^n<br>  $$</p><p>  $$<br>  \sigma ^2 &#x3D; \frac{1}{N}\sum \limits _{n&#x3D;1}^N (x^n-\mu)^2<br>  $$</p><p>  然后将特征$x^n$进行变换：</p><p>  $$<br>  \hat x^n &#x3D; \frac{x^n-\mu}{\sigma}<br>  $$</p><p>  标准差$\sigma$做分母不为零的含义：</p><p>  表示这一维度的特征相同，不重要可以直接去掉</p></li><li><p><strong>白化（whitening，PCA）</strong>:</p><p>  去除所有成分之间的相关性</p><p>  <img src="/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E5%92%8C%E6%AD%A3%E5%88%99%E5%8C%96%E9%97%AE%E9%A2%98/Untitled%205.png" alt="标准化和白化"></p></li></ul><h3 id="逐层规范化"><a href="#逐层规范化" class="headerlink" title="逐层规范化"></a>逐层规范化</h3><p>ML中的常用方法，应用到DL的目的是：</p><ol><li><p>更好的尺度不变性</p><p> 解决内部协变量偏移问题，防止在深度学习中某一个层的输入分布的微小变化引起更深层中的较大偏移。</p></li><li><p>更平滑的优化地形</p></li></ol><ul><li>规范化方法<ul><li><p><strong>批量规范化（Batch Normalization）</strong></p><p>  对于一个神经网络，第$l$层的净输入为$z^l$，神经元的输出为$a^l$，即：</p><p>  $$<br>  a^l &#x3D; f(z^l)&#x3D;f(Wa^{l-1}+b)<br>  $$</p><p>  对于一个样本数为k的批量样本，计算其方差和均值：</p><p>  $$<br>  \begin{aligned}<br>  &amp;\boldsymbol{\mu}<em>{\mathcal{B}}&#x3D;\frac{1}{K} \sum</em>{k&#x3D;1}^{K} \boldsymbol{z}^{(k, l)} \<br>  &amp;\boldsymbol\sigma_{\mathcal{B}}^{2}&#x3D;\frac{1}{K} \sum_{k&#x3D;1}^{K}\left(\boldsymbol{z}^{(k, l)}-\boldsymbol{\mu}<em>{\mathcal{B}}\right) \odot\left(\boldsymbol{z}^{(k, l)}-\boldsymbol{\mu}</em>{\mathcal{B}}\right) .<br>  \end{aligned}<br>  $$</p><p>  批量规范化：</p><p>  $$<br>  \begin{aligned}<br>  \hat{\boldsymbol{z}}^{l} &amp;&#x3D;\frac{\boldsymbol{z}^{l}-\mu_{\mathcal{B}}}{\sqrt{\sigma_{\mathcal{B}}^{2}+\epsilon}} \odot \boldsymbol{\gamma}+\boldsymbol{\beta} \<br>  &amp; \triangleq \mathrm{BN}_{\gamma, \boldsymbol{\beta}}\left(\boldsymbol{z}^{l}\right),<br>  \end{aligned}<br>  $$</p><p>  其中$\boldsymbol{\gamma}$是缩放参数向量，$\boldsymbol{\beta}$是平移参数向量，都是可学习参数。能够增强规范化的能力。</p>  <aside>  💡 批量规范化可以作为神经网络的一层（BN层）直接加入网络结构中。    </aside>      </li><li><p><strong>层规范化（Layer Normalization）</strong></p><p>  不看batch的内容，对一层内所有神经元进行规范化</p><p>  计算层内均值和方差：</p><p>  $$<br>  \begin{aligned}<br>  \mu^{l} &amp;&#x3D;\frac{1}{M_{l}} \sum_{i&#x3D;1}^{M_{l}} z_{i}^{l} \<br>  (\sigma^{l})^{2} &amp;&#x3D;\frac{1}{M_{l}} \sum_{i&#x3D;1}^{M_{l}}\left(z_{i}^{l}-\mu^{l}\right)^{2}<br>  \end{aligned}<br>  $$</p><p>  层规范化：</p><p>  $$<br>  \begin{aligned}<br>  \hat{\boldsymbol{z}}^{l} &amp;&#x3D;\frac{\boldsymbol{z}^{l}-\mu^{l}}{\sqrt{(\sigma^{(l)})^{2}+\epsilon}} \odot \boldsymbol{\gamma}+\boldsymbol\beta \<br>  &amp; \triangleq \mathrm{LN}_{\boldsymbol {\gamma, \beta}}\left(\boldsymbol{z}^{l}\right)<br>  \end{aligned}<br>  $$</p>  <aside>  💡 层规范化也可以作为神经网络的一层（LN层）直接加入网络结构中。应用较多。    </aside>  <p>  <img src="/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E5%92%8C%E6%AD%A3%E5%88%99%E5%8C%96%E9%97%AE%E9%A2%98/Untitled%206.png" alt="BN和LN的区别"></p><p>  <img src="/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E5%92%8C%E6%AD%A3%E5%88%99%E5%8C%96%E9%97%AE%E9%A2%98/Untitled%207.png" alt="各种规范化的对比"></p></li><li><p>权重规范化</p></li><li><p>局部响应规范化</p></li></ul></li></ul><h2 id="超参数优化"><a href="#超参数优化" class="headerlink" title="超参数优化"></a>超参数优化</h2><h3 id="超参数"><a href="#超参数" class="headerlink" title="超参数"></a>超参数</h3><ul><li>层数</li><li>每层神经元个数</li><li>激活函数</li><li>学习率（以及动态调整算法）</li><li>正则化系数</li><li>mini-batch大小</li></ul><h3 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h3><ul><li><p>网格搜索</p><p>  对每一个超参数取几个”经验值“，比如对于学习率$\alpha$，可以设置</p><p>  $$<br>  \alpha  \in {0.01,0.1,0.5,1.0}<br>  $$</p></li><li><p>随机搜索</p><p>  对超参数进行随机组合</p></li><li><p>贝叶斯优化</p></li><li><p>动态资源分配</p></li><li><p>神经架构搜索</p></li></ul><h2 id="网络正则化"><a href="#网络正则化" class="headerlink" title="网络正则化"></a>网络正则化</h2><p>由于神经网络的拟合能力强，会将模型过度参数化，会导致模型泛化性差。为提高神经网络的泛化能力通常要加入正则化。</p><p><strong>正则化</strong>就是所有损害优化方法的方法。通常分为两种方式：</p><ol><li>增加优化约束：L1、L2约束</li><li>干扰优化过程：提前停止、随机梯度下降、暂退法、权重衰减。</li></ol><h3 id="早停法"><a href="#早停法" class="headerlink" title="早停法"></a>早停法</h3><p>引入<strong>验证集（Validation Dataset）</strong>测试每一次迭代的参数时候在验证集上最优，如果在验证集上错误率不再下降就停止迭代。防止过拟合。</p><h3 id="权重衰减"><a href="#权重衰减" class="headerlink" title="权重衰减"></a>权重衰减</h3><p>限制权重取值范围。在每次参数更新时，引入一个衰减系数$\beta$</p><p>$$<br>\theta_t&#x3D;(1-\beta)\theta_{t-1}-\alpha \bold g_t<br>$$</p><h3 id="暂退法（Dropout）"><a href="#暂退法（Dropout）" class="headerlink" title="暂退法（Dropout）"></a>暂退法（Dropout）</h3><p>有一个神经层$y&#x3D;f(Wx+b)$，引入一个随机的掩蔽函数$mask(x)&#x3D;m\odot x$，$m \in {0,1}^D$.得到神经层的输出$y&#x3D;f(Wmask(x)+b)$.</p><aside>💡 可以理解为从原始网络中采样得到一个子网络，如果有n个神经元，则可以采样出$2^n$个子网络。</aside><h3 id="ell-1-和-ell-2-正则化"><a href="#ell-1-和-ell-2-正则化" class="headerlink" title="$\ell_1$和$\ell_2$正则化"></a>$\ell_1$和$\ell_2$正则化</h3><p>在原本的优化问题中加入$\ell_1$$\ell_2$范数防止过拟合</p><p>$$<br>\begin{aligned}<br>&amp;\theta^{*}&#x3D;\underset{\theta}{\arg \min } \frac{1}{N} \sum_{n&#x3D;1}^N \mathcal{L}\left(y^{(n)}, f\left(\boldsymbol{x}^{(n)} ; \theta\right)\right) \<br>&amp;\text { s.t. } \quad \ell_{p}(\theta) \leq 1<br>\end{aligned}<br>$$</p><p>$\ell_2$正则化的参数更新结果为：$\theta_t &#x3D; \theta_{t-1}-\alpha(g_t+\lambda\theta_{t-1})&#x3D;(1-\alpha\lambda)\theta_{t-1}-\alpha g_t$</p><p>形式上和权重衰减的类似：$\theta_t&#x3D;(1-\beta)\theta_{t-1}-\alpha \bold g_t$ </p><aside>💡 在SGD中 $\ell_2$ 正则化和权重衰减是等价的，但在复杂的优化算法如Adam中则不能等价。  </aside><p><img src="/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E5%92%8C%E6%AD%A3%E5%88%99%E5%8C%96%E9%97%AE%E9%A2%98/Untitled%208.png" alt="不同范数的约束条件示例"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>模型</th><th>优化</th><th>正则化</th><th>隐式正则化</th></tr></thead><tbody><tr><td>用ReLU作为激活函数</td><td>SGD+mini-batch(动态学习率、Adam算法优先)</td><td>早停法</td><td>SGD</td></tr><tr><td>残差链接</td><td>每次迭代都重新随机排序</td><td>暂退法</td><td>批量规范化</td></tr><tr><td>逐层规范化</td><td>数据预处理（规范化）</td><td>权重衰减</td><td>$\ell_1$和$\ell_2$正则化</td></tr><tr><td></td><td>参数初始化（预训练）</td><td></td><td>数据增强</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ML</tag>
      
      <tag>DL</tag>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习数学基础③数值计算和最优化理论</title>
    <link href="/2022/07/30/ji-qi-xue-xi-shu-xue-ji-chu-shu-zhi-ji-suan-he-zui-you-hua-li-lun/"/>
    <url>/2022/07/30/ji-qi-xue-xi-shu-xue-ji-chu-shu-zhi-ji-suan-he-zui-you-hua-li-lun/</url>
    
    <content type="html"><![CDATA[<h1 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算"></a>数值计算</h1><h2 id="上溢和下溢"><a href="#上溢和下溢" class="headerlink" title="上溢和下溢"></a>上溢和下溢</h2><p>在数字计算机中我们需要通过有限的位数表示无限多的实数,这意味着会引入误差.</p><ul><li><strong>下溢(underflow):<strong>当接近零的数被四舍五入为零时发生下溢。许多函数会在其参数为零而不是一个很小的正数时才会表现出质的不同。例如，我们通常要避免被零除</strong>。</strong></li><li>**上溢(overflow):**当大量级的数被近似为$\infin$或$-\infin$时发生上溢。进一步的运算通常将这些无限值变为非数字。</li></ul><p>避免数值上溢或者下溢的方法常用softmax函数.</p><p><img src="/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E2%91%A2%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E5%92%8C%E6%9C%80%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA/softmax%E5%87%BD%E6%95%B0.png" alt="softmax函数"></p><p>softmax函数能够将上下接近溢出的数据<em>压缩</em>至0-1的范围内.</p><h1 id="最优化"><a href="#最优化" class="headerlink" title="最优化"></a>最优化</h1><h2 id="最优化理论"><a href="#最优化理论" class="headerlink" title="最优化理论"></a>最优化理论</h2><p><strong>经验风险最小化</strong></p><p>用最小的代价取得最大的收益.也就是我们今天常说的算法.</p><h2 id="凸集与凸集分离定理"><a href="#凸集与凸集分离定理" class="headerlink" title="凸集与凸集分离定理"></a>凸集与凸集分离定理</h2><h3 id="1-凸集"><a href="#1-凸集" class="headerlink" title="1.凸集"></a>1.凸集</h3><p>在实数域的向量空间中.如果一个集合中任意两点的连线上的点都在该集合中,则该集合为<strong>凸集</strong>.</p><p><img src="https://pic1.zhimg.com/v2-608f89f47688c41e4c3f83cfad095c84_r.jpg" alt="凸集和非凸集"></p><p>数学定义: 一个集合$S\subset R^T$,若对于任意两点$x,y \in S$,以及实数$\lambda(0\leqslant \lambda \leqslant 1)$,都有$\lambda x+(1-\lambda )y \in S$,则称集合S为凸集.</p><h3 id="2-超平面和半空间"><a href="#2-超平面和半空间" class="headerlink" title="2.超平面和半空间"></a>2.超平面和半空间</h3><p>三维空间的<strong>超平面</strong>就是一个面(曲面),二维空间的超平面就是一条线(曲线),推广到n维空间.</p><p>超平面的某一个方向的所有样本组成<strong>半空间.</strong></p><h3 id="3-凸集分离定理"><a href="#3-凸集分离定理" class="headerlink" title="3.凸集分离定理"></a>3.凸集分离定理</h3><p>所谓两个凸集分离，直观地看是指两个凸集合没有交叉和重合的部分，因此可以用一张超平面将两者隔在两边，如下图所示：</p><p><img src="https://pic2.zhimg.com/80/v2-4116a3bda12faa5e2421ce27efb7fb71_1440w.jpg" alt="凸集分离"></p><h3 id="4-凸函数"><a href="#4-凸函数" class="headerlink" title="4.凸函数"></a>4.凸函数</h3><p>凸函数是一个定义域在某个向量空间的凸子集上的实值函数.</p><p><img src="https://pic3.zhimg.com/80/v2-f1b39d0aad4388433158679221f813d2_1440w.jpg" alt="凸函数"></p><aside>💡 在图中直线始终在凸函数曲线上方</aside><p>数学定义:对于函数f(x),如果其定义域C是凸集,且对于$\forall x,y \in C, 0\leqslant \alpha \leqslant 1$,有:</p><p>$$<br>f(\theta x+(1-\theta )y)\leqslant \theta f(x)+(1-\theta )f(y)<br>$$</p><p><strong>如果一个函数是凸函数,则其局部最优点就是其全局最优点.</strong></p><p>因为在ML中我们就是在求模型的全局最优点,所以一旦证明ML模型中的损失函数为凸函数,相当于我们只需要求它的局部最优点.</p><aside>💡 求解非凸函数的全局最优点也就成了神经网络中的常见难题.</aside>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习数学基础②概率论和信息论</title>
    <link href="/2022/07/26/ji-qi-xue-xi-shu-xue-ji-chu-gai-lu-lun-he-xin-xi-lun/"/>
    <url>/2022/07/26/ji-qi-xue-xi-shu-xue-ji-chu-gai-lu-lun-he-xin-xi-lun/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习数学基础②概率论与信息论"><a href="#机器学习数学基础②概率论与信息论" class="headerlink" title="机器学习数学基础②概率论与信息论"></a>机器学习数学基础②概率论与信息论</h1><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><ul><li><p>随机变量:可以是连续的也可以是离散的</p></li><li><p>概率分布:符合随机变量取值范围的某个对象属于某个类别或服从某种趋势的可能性</p></li><li><p>联合概率分布:$P(\mathrm x &#x3D;x,\mathrm y&#x3D;y)$表示x&#x3D;$x$和y&#x3D;$y$同时发生的概率,简写为$P(x,y)$</p></li><li><p>概率函数和似然函数</p><ul><li><p>Note:区别</p><p>  对于一个函数$P(x|\theta)$,其中x表示一个具体的数据,$\theta$表示模型的参数.</p><p>  如果$\theta$已知,x为变量,这个函数就是<strong>概率函数</strong>.表示对于不同的样本点x,其出现的概率是多少.</p><p>  如果x已知,$\theta$为变量,这个函数就是<strong>似然函数</strong>.表示对于不同的参数,出现x样本点的概率是多少.</p></li></ul></li><li><p>期望:$E(X)&#x3D;\sum \limits _{k&#x3D;1}^{n}x_kP(x_k), E(x)&#x3D;\int xf(x)dx$</p></li><li><p>方差:各个样本数据分别与平均数之差的平方和的平均数$Var(x)$</p></li><li><p>协方差:衡量随机变量X和Y之间的总体误差$Cov(X,Y)$</p></li></ul><h1 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h1><ul><li><p><strong>条件概率</strong>:对于给定$X&#x3D;x$时发生$Y&#x3D;y$的概率记为$P(Y&#x3D;y|X&#x3D;x)$,计算公式为$P(Y&#x3D;y|X&#x3D;x)&#x3D;\frac {P(x,y)}{P(X&#x3D;x)}$</p></li><li><p><strong>先验概率和后验概率</strong></p></li><li><p><strong>贝叶斯公式</strong>:利用先验概率计算后验概率</p><ul><li><p>Note:贝叶斯公式推导</p><p>  $$<br>  P(B|A)&#x3D;\frac {P(AB)}{P(A)}, P(A|B)&#x3D;\frac {P(AB)}{P(B)}<br>  $$</p><p>  $$<br>  P(AB)&#x3D;P(B|A)P(A)&#x3D;P(A|B)P(B)<br>  $$</p><p>  $$<br>  P(B|A)&#x3D;\frac {P(B|A)P(B)}{P(A)}<br>  $$</p><p>  全概率公式求$P(A)$</p><p>  $$<br>  P(A)&#x3D;\sum \limits _{i&#x3D;1}^{N}P(A|B_i)P(B_i)<br>  $$</p><p>  代入得到贝叶斯公式:</p><p>  $$<br>  P(B_i|A)&#x3D;\frac {P(A|B_i)P(B_i)}{\sum \limits _{i&#x3D;1}^{N}P(A|B_i)P(B_i)}<br>  $$</p></li></ul></li><li><p>**最大似然估计(MLE):**在”模型已定,参数$\theta$未知”的情况下,通过观测数据来估计未知参数$\theta$的一种方法,要求所有采样都是独立同分布.</p><ul><li>Note:最大似然估计的使用<ol><li>写出似然函数</li><li>对似然函数取对数</li><li>两边同时求导(多个变量就求偏导)</li><li>令导数为0,解出似然方程</li></ol><ul><li><p>例子</p><p>  <img src="https://s2.loli.net/2022/07/26/yXuBHYVrIP5LpNZ.png" alt="例题"></p><p>  <img src="https://s2.loli.net/2022/07/26/LFjf2RnIMZbyuOo.png" alt="例题解答"></p></li></ul></li></ul></li></ul><h1 id="常见分布函数"><a href="#常见分布函数" class="headerlink" title="常见分布函数"></a>常见分布函数</h1><ol><li><p>0-1分布</p><p> $$<br> P(X&#x3D;1)&#x3D;p \ P(X&#x3D;0)&#x3D;1-p<br> $$</p></li><li><p>几何分布</p><p> 离散型概率分布.在n次伯努利试验中,前k-1次失败,第k次成功的概率,其概率分布函数为:$P(X&#x3D;k)&#x3D;(1-p)^{k-1}p$</p><p> $$<br> E(X)&#x3D;\frac {1}{p} \ Var(X)&#x3D;\frac {1-p}{p^2}<br> $$</p></li><li><p>二项分布</p><p> n次伯努利试验中,每次试验只有两种可能结果,并且两种结果相互独立.在n次重复独立试验中事件发生k次的概率为:$P(X&#x3D;k)&#x3D;C_n^kp^k(1-p)^{n-k}$<br> $$<br> E(X)&#x3D;np \ Var(X)&#x3D;np(1-p)<br> $$</p></li><li><p>高斯分布&#x2F;正态分布</p><p> ML中最常用的概率分布.其中 $\mu$决定分布中心的位置,$\sigma$ 标准差决定正态分布的幅度.</p><p> <img src="https://s2.loli.net/2022/07/26/EXJlHW7oDNhqCbI.png" alt="正态分布例图"></p><p> $$<br> X \sim N(\mu,\sigma^2)<br> $$</p></li><li><p>指数分布</p><p> 指数分布是一种连续概率分布,可以用来表示独立随机事件发生的时间间隔.其中$\lambda &gt;0$表示每单位时间内发生事件的次数.</p><p> <img src="https://s2.loli.net/2022/07/26/afSYlZeE3C8jOKy.png" alt="指数分布例图"></p><p> $$<br> X\sim Exp(\lambda)<br> $$</p><p> 概率密度函数为:</p><p> $$<br> f(x;\lambda)&#x3D;<br> \left{<br> \begin{aligned}<br> &amp;\lambda e^{-\lambda x} &amp;x\geq0 \<br> &amp;0&amp;x&lt;0<br> \end{aligned}<br> \right.<br> $$</p><p> 特点为无记忆性,在任意时间段内某个事件发生的概率相同,结合期望理解.期望为:$E(x)&#x3D;\frac {1}{\lambda}$.</p></li><li><p>泊松分布</p><p> 泊松分布是一种常见的离散概率分布.适合描述单位时间内随机事件发生的次数的概率分布.参数$\lambda$是随机事件发生次数的数学期望.</p><p> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/Poisson_pmf.svg/650px-Poisson_pmf.svg.png" alt="泊松分布例图"></p><p> 概率密度函数为:</p><p> $$<br> P(X&#x3D;k)&#x3D;\frac {e^{-\lambda}\lambda^k}{k!}<br> $$</p><p> 泊松分布表示为:</p><p> $$<br> X \sim Pois(\lambda)<br> $$</p><p> 性质有</p><ol><li><p>期望与方差相等,都等于参数$\lambda$</p></li><li><p>两个独立且服从泊松分布的随机变量,其和仍然服从泊松分布</p><p> $$<br> X \sim Poisson(\lambda_1),Y \sim Possion(\lambda_2)\<br> X+Y \sim Poisson(\lambda_1+\lambda_2)<br> $$</p></li></ol></li></ol><h1 id="信息论"><a href="#信息论" class="headerlink" title="信息论"></a>信息论</h1><p><strong>自信息:</strong></p><p>一个事件x&#x3D;$x$的自信息为$I(x)&#x3D;-\log P(x)$</p><p><strong>香农熵:</strong></p><p>一个分布P(x)的事件产生的信息总量的期望</p><p>$$<br>H(x)&#x3D;\mathbb{E}<em>{X\sim P}[I(x)]&#x3D;-\mathbb{E}</em>{X\sim P}[\log P(x)]<br>$$</p><p><strong>KL散度(KL divergence):</strong></p><p>衡量两个单独的概率分布P(x)和Q(x)的差异.KL散度非负,为0时表示分布相同.</p><p>$$<br>D_{KL}(P||Q)&#x3D;\mathbb{E}<em>{X\sim P}\left[ \log \frac {P(x)}{Q(x)} \right]&#x3D;\mathbb{E}</em>{X\sim P}[\log P(x)- \log Q(x)]<br>$$</p><aside>💡 KL散度中的P分布和Q分布不能交换顺序</aside><p><strong>交叉熵(cross-entropy):</strong></p><p>$$<br>H(P,Q)&#x3D;H(P)+D_{KL}(P||Q)&#x3D;-\mathbb{E}_{X\sim P}\log Q(x)<br>$$</p><aside>💡 在信息论中0log0结果取0</aside>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ML</tag>
      
      <tag>概率</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习数学基础①线性代数</title>
    <link href="/2022/07/24/ji-qi-xue-xi-shu-xue-ji-chu-xian-xing-dai-shu/"/>
    <url>/2022/07/24/ji-qi-xue-xi-shu-xue-ji-chu-xian-xing-dai-shu/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习数学基础①线性代数"><a href="#机器学习数学基础①线性代数" class="headerlink" title="机器学习数学基础①线性代数"></a>机器学习数学基础①线性代数</h1><p>线性代数的核心问题是将一个向量空间的子空间映射到另一个向量空间的子空间, 这个过程使用过的方法叫<strong>线性变换</strong>, 而<strong>矩阵</strong>就是两个向量空间之间线性变换的表达形式</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul><li><p>矩阵</p></li><li><p>向量</p></li><li><p>矩阵乘法: 点积</p></li><li><p>矩阵转置</p></li><li><p>逆矩阵: 两个方阵相乘结果为单位阵, 记为$A^{-1}$,称$A$为可逆矩阵</p></li><li><p>正交: 向量$x$与$y$正交, 则$x \cdot y&#x3D;0$, 意味着垂直</p></li><li><p>正交矩阵: 对于方阵$A \in \mathbb{R}^{n \times n}$, 若有$AA^T&#x3D;I_n&#x3D;A^TA$, 其中$A^{-1}&#x3D;A^T$, 意味着其转置等于其逆的矩阵, 即<strong>正交矩阵</strong></p></li><li><p>对角矩阵</p></li><li><p>正定矩阵: 有$n\times n$实对称矩阵$A$和n维非零向量$x$, 如果$x^TAx&gt;0$则称$A$为<strong>正定矩阵</strong>, 如果$x^TAx\geqslant 0$则称$A$为<strong>半正定矩阵</strong>. </p><blockquote><p>正定矩阵$A$保证变换后的向量$Ax$与原向量$x$都位于超平面的同一侧.</p></blockquote></li></ul><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><h3 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h3><p>向量的范数就是向量的长度或大小, 通项公式为$||\vec x||&#x3D;(\Sigma_{i&#x3D;1}^{n}|x^i|^p)^{1&#x2F;p}$</p><p><em>在ML中常用来限制模型复杂度, 防止过拟合等</em></p><p>其中p为范数的阶, ML中常用两个:</p><ul><li>p&#x3D;1,称为一阶范数$l_1$范数 L1正则化, $||\vec x||&#x3D;\Sigma_{i&#x3D;1}^{n}|x^i|$, 表示向量$x$中的各元素绝对值的和</li><li>p&#x3D;2, 称为二阶范数$l_2$范数 L2正则化,$||\vec x||&#x3D;\sqrt{ \Sigma_{i&#x3D;1}^{n}|x^i|^2}$, 表示向量中的元素平方和再开平方</li></ul><h3 id="柯西不等式"><a href="#柯西不等式" class="headerlink" title="柯西不等式"></a>柯西不等式</h3><p>由余弦定理$\vec a \cdot \vec b&#x3D;|\vec a||\vec b|\cos \theta$得:<br>$$<br>|\vec a \cdot \vec b|\leqslant |\vec a||\vec b|<br>$$</p><h2 id="矩阵运算常用技巧"><a href="#矩阵运算常用技巧" class="headerlink" title="矩阵运算常用技巧"></a>矩阵运算常用技巧</h2><ol><li><p>若$A$和$B$是n阶方阵, 且$A+B$可逆, 有:<br> $$<br> A(A+B)^{-1}B&#x3D;B(A+B)^{-1}A<br> $$</p></li><li><p><strong>矩阵指数</strong> $A$和$B$是n阶方阵, 有:</p><ul><li><p>$$<br>  e^{A^{T}}&#x3D;(e^A)^T<br>  $$</p></li><li><p>若$AB&#x3D;BA$, 则</p></li></ul><p> $$<br> e^Ae^B &#x3D; e^Be^A &#x3D; e^{A+B}<br> $$</p></li></ol><h2 id="张量和张量积"><a href="#张量和张量积" class="headerlink" title="张量和张量积"></a>张量和张量积</h2><p><strong>张量</strong>是在ML中常用的概念, 可理解为存在[标量,向量,矩阵…]等形式的一种数据结构<br>张量积(tensor product)又称克罗内克积(Kronecker product)</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>$A&#x3D;(a_{ij})_{m\times n}$ , $B$ 为$p\times q$矩阵, 张量积$A\otimes B$是一个$mp\times nq$矩阵:<br>$$<br>A\otimes B &#x3D; </p><p>\left[<br>\begin{matrix}<br>    a_{11}B&amp;  \dots&amp; a_{1n}B \<br>    \vdots&amp; \ddots &amp;\vdots\<br>    a_{m1}B &amp;\dots&amp; a_{mn}B<br>\end{matrix}<br>\right]<br>$$</p><h2 id="特征分解"><a href="#特征分解" class="headerlink" title="特征分解"></a>特征分解</h2><p>是指将矩阵分为一组特征向量和特征值</p><h3 id="特征向量和特征值"><a href="#特征向量和特征值" class="headerlink" title="特征向量和特征值"></a>特征向量和特征值</h3><p>一个可对角化的矩阵$A$的<strong>特征向量</strong>$v$ 有:<br>$$<br>Av&#x3D; \lambda v<br>$$</p><blockquote><p>一个方阵与特征向量相乘 相当于 对特征向量进行缩放.</p></blockquote><p>标量$\lambda$就是这个特征向量的<strong>特征值</strong></p><h3 id="奇异值分解-SVD"><a href="#奇异值分解-SVD" class="headerlink" title="奇异值分解(SVD)"></a>奇异值分解(SVD)</h3><p>由于特征分解要求矩阵$A$是一个可对角化的矩阵, 要求很高</p><p>为将特征分解进行推广, 使用的方法叫”矩阵的奇异值分解”, 对于一个$m \times n$的矩阵$A$:<br>$$<br>A&#x3D; UDV^T<br>$$<br>$U$是$m\times m$方阵, $D$是$m\times n$矩阵, $V$是$n\times n$方阵</p><p>$UV$都是正交矩阵, $D$是对角矩阵, $D$的对角线上的元素就是矩阵$A$的<strong>奇异值</strong>,$U$的列向量被称为<strong>左奇异向量</strong>, $V$的列向量被称为<strong>右奇异向量</strong></p><h2 id="距离计算"><a href="#距离计算" class="headerlink" title="距离计算"></a>距离计算</h2><p>计算两个向量之间的距离, 可以反映之间的相似程度</p><p>现有两个n维变量<br>$$<br>A&#x3D; [x_{11},x_{12},\dots,x_{1n}]\<br>B&#x3D; [x_{21},x_{22},\dots,x_{2n}]<br>$$</p><h3 id="1-曼哈顿距离"><a href="#1-曼哈顿距离" class="headerlink" title="1. 曼哈顿距离"></a>1. 曼哈顿距离</h3><p>表示向量对应元素的距离和<br>$$<br>d_{12} &#x3D; \sum \limits <em>{k&#x3D;1}^n |x</em>{1k}-x_{2k}|<br>$$</p><h3 id="2-欧氏距离"><a href="#2-欧氏距离" class="headerlink" title="2. 欧氏距离"></a>2. 欧氏距离</h3><p>就是L2范数, 表示对应元素的距离的平方和的开方<br>$$<br>d_{12} &#x3D; \sqrt{\sum \limits <em>{k&#x3D;1}^n (x</em>{1k}-x_{2k})^2}<br>$$</p><h3 id="3-切比雪夫距离"><a href="#3-切比雪夫距离" class="headerlink" title="3. 切比雪夫距离"></a>3. 切比雪夫距离</h3><p>也是无穷范数, 表示各元素上距离中的最大值<br>$$<br>d_{12} &#x3D; \max (|x_{1k}-x_{2k}|)<br>$$</p><h3 id="4-余弦距离"><a href="#4-余弦距离" class="headerlink" title="4. 余弦距离"></a>4. 余弦距离</h3><p>两个方向的夹角余弦取值范围为[-1,1]</p><p>夹角余弦越大,表示两个向量夹角越小; 方向重合的两个向量, 余弦值为1;方向相反时, 余弦值为-1<br>$$<br>\begin{aligned}<br>\cos \theta&amp;&#x3D; \frac {AB}{|A||B|} \<br>&amp;&#x3D; \frac {\sum \limits <em>{k&#x3D;1}^{n}x</em>{1k}x_{2k}}{\sqrt {\sum \limits <em>{k&#x3D;1}^{n}x</em>{1k}^2}\sqrt {\sum \limits <em>{k&#x3D;1}^{n}x</em>{2k}^2}}<br>\end{aligned}<br>$$</p><h3 id="5-汉明距离"><a href="#5-汉明距离" class="headerlink" title="5. 汉明距离"></a>5. 汉明距离</h3><p>定义两个字符串中的不同位数的数目</p><p>$e.g.$ 字符串<code>1111</code>和<code>1001</code>的汉明距离为2</p><h3 id="6-杰卡德相似系数"><a href="#6-杰卡德相似系数" class="headerlink" title="6. 杰卡德相似系数"></a>6. 杰卡德相似系数</h3><p>两个集合AB的交集元素在并集中的比例<br>$$<br>J(A,B) &#x3D; \frac {|A\cap B|}{|A\cup B|}<br>$$</p><h3 id="7-杰卡德距离"><a href="#7-杰卡德距离" class="headerlink" title="7. 杰卡德距离"></a>7. 杰卡德距离</h3><p>与杰卡德相似系数表示的内容相反<br>$$<br>J_{\sigma}&#x3D;1 - J(A,B) &#x3D; 1- \frac {|A\cap B|}{|A\cup B|}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性代数</tag>
      
      <tag>ML</tag>
      
      <tag>DL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客在matery主题下插入mermaid流程图</title>
    <link href="/2022/07/12/hexo-bo-ke-zai-matery-zhu-ti-xia-cha-ru-mermaid-liu-cheng-tu/"/>
    <url>/2022/07/12/hexo-bo-ke-zai-matery-zhu-ti-xia-cha-ru-mermaid-liu-cheng-tu/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客在matery主题下插入mermaid流程图"><a href="#Hexo博客在matery主题下插入mermaid流程图" class="headerlink" title="Hexo博客在matery主题下插入mermaid流程图"></a>Hexo博客在matery主题下插入mermaid流程图</h1><blockquote><p>本文解决hexo本身无法渲染mermaid流程图的问题,本质是加载对应的js文件</p><p>其他主题可以直接参考<a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">https://github.com/webappdevelp/hexo-filter-mermaid-diagrams</a></p></blockquote><p>官方指定在<code>after-footer.ejs</code>文件中插入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;% if (theme.mermaid.enable) &#123; %&gt;<br>  &lt;script src=&#x27;https://unpkg.com/mermaid@&lt;%= theme.mermaid.version %&gt;/dist/mermaid.min.js&#x27;&gt;&lt;/script&gt;<br>  &lt;script&gt;<br>    if (window.mermaid) &#123;<br>      mermaid.initialize(&#123;theme: &#x27;forest&#x27;&#125;);<br>    &#125;<br>  &lt;/script&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><p>而实际上在matery主题中没有该文件</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="第一步-增加js代码"><a href="#第一步-增加js代码" class="headerlink" title="第一步 增加js代码"></a>第一步 增加js代码</h3><p>在matery主题路径<code>themes/hexo-theme-matery/layout/_partial</code>下找到<code>footer.ejs</code></p><p>直接在该文件的最后添加如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;% if (theme.mermaid.enable) &#123; %&gt;<br>  &lt;script src=&#x27;https://unpkg.com/mermaid/dist/mermaid.min.js&#x27;&gt;&lt;/script&gt;<br>  &lt;script&gt;<br>    if (window.mermaid) &#123;<br>      mermaid.initialize(&#123;theme: &#x27;forest&#x27;&#125;);<br>    &#125;<br>  &lt;/script&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><p><strong>注意到去掉了原本中间的版本控制, 因为版本选择可能会导致加载的js不能正常显示typora中的mermaid图</strong></p><ul><li>如果想要修改主题则直接在这里修改theme后的内容为如下: <em>default | dark | forest | neutral</em></li></ul><h3 id="第二步-增加yml文本"><a href="#第二步-增加yml文本" class="headerlink" title="第二步 增加yml文本"></a>第二步 增加yml文本</h3><p>在<em>主题的配置文件</em>下<code>themes/hexo-theme-matery/_config.yml</code>增加文本</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mermaid:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>不出意外到这里进行测试就可以见到hexo能够加载出来mermaid图了(撒花)</p><p>如果没能成功加载, 可以查看源代码查找mermaid, 看看增加的ejs代码是否成功渲染</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hexo</tag>
      
      <tag>typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成模型之Flow-based-Model(2)</title>
    <link href="/2022/07/09/sheng-cheng-mo-xing-zhi-flow-based-model-2-liu-mo-xing-tui-dao/"/>
    <url>/2022/07/09/sheng-cheng-mo-xing-zhi-flow-based-model-2-liu-mo-xing-tui-dao/</url>
    
    <content type="html"><![CDATA[<h1 id="生成模型flow-based-model2流模型">生成模型Flow-BasedModel（2）流模型</h1><h2 id="推导">推导</h2><p>根据生成器相关知识可知：一个最佳的生成器<span class="math inline">\(G^{*}= argmax_{G}\sum\limits_{i=1}^{m}logP_{G}(x^{i})\)</span></p><p>根据可变理论有：<span class="math inline">\(P_G(x^i)=\pi(z^i)|\det(J_{G^{-1}})|\)</span>,其中<span class="math inline">\(z^i=G^{-1}(x^i)\)</span></p><p>等号两侧取对数有: <span class="math inline">\(logP_G(x^i)=log\pi(G^{-1}(x^i))+log|\det(J_{G^{-1}}|\)</span></p><p>由此得到最佳生成器<span class="math inline">\(G^*\)</span>的右式,即让<span class="math inline">\(logP_G(x^i)\)</span>最大,便得到最佳<span class="math inline">\(G^*\)</span></p><p>然而<span class="math inline">\(z^i=G^{-1}(x^i)\)</span>对<span class="math inline">\(G\)</span>提出了限制:</p><ol type="1"><li><span class="math inline">\(\det(J_G)\)</span>需要可计算</li><li><span class="math inline">\(G^{-1}\)</span>要求生成器<span class="math inline">\(G\)</span>本身可逆, 输入输出的形状一样</li></ol><p>解决方法: 使用多个生成器<span class="math inline">\(G\)</span>连续生成, 以达到拟合<span class="math inline">\(P_{data}\)</span>的目的</p><h2 id="多个生成器的情况">多个生成器的情况</h2><p>对于多个<span class="math inline">\(G\)</span>的生成结果有: <span class="math inline">\(\log(P_K(x^i))=log\pi(z^i)+\sum\limits_{i=1}^Klog|\det(J_{G_{K^{-1}}})|\)</span>,其中<span class="math inline">\(z^i=G_1^{-1}G_2^{-1}...G_K^{-1}(x^i)\)</span></p><blockquote><p>依旧是取左式最大</p></blockquote><h2 id="流模型实质">流模型实质</h2><p>以一个生成器为例:</p><pre class="mermaid">graph LRz --> G --> x</pre><p><span class="math display">\[logP_G(x^i)=log\pi(G^{-1}(x^i))+log|\det(J_{G^{-1}})|\]</span></p><p>发现为得到左式中的<span class="math inline">\(G\)</span>,右式只是用到了<span class="math inline">\(G^{-1}\)</span>,因此我们直接训练出<span class="math inline">\(G^{-1}\)</span></p><pre class="mermaid">graph RLx --> G-1 --> z</pre><p>其中, <span class="math inline">\(x^i\)</span>是从<span class="math inline">\(P_{data}(x)\)</span>中采样的, <span class="math inline">\(z^i=G^{-1}(x^i)\)</span></p><p>欲使左式最大, 右侧两项应尽可能大</p><ul><li>右侧第一项是对数函数, 而正态分布<span class="math inline">\(\pi(z^i)\)</span>在<span class="math inline">\(z^i\)</span>等于0向量时最大,因此可能导致训练出的<span class="math inline">\(G^{-1}\)</span>使所有生成的<span class="math inline">\(z^i\)</span>都为零向量, 进而导致<span class="math inline">\(J_{G^{-1}}\)</span>变成全零矩阵, 行列式<span class="math inline">\(\det(J_{G^{-1}})\)</span>也为0,最终右侧第二项变为<span class="math inline">\(-\inf\)</span></li></ul><p>所以流模型实际上在做的事情就是: 在第一项趋零的情况下,使用第二项约束结果防止全零, 最终得到最佳生成器</p><h2 id="应用-coupling-layer">应用-Coupling Layer</h2><figure><img src="https://s2.loli.net/2022/07/10/pqBCRzcYLbiu2Uo.png" alt="coupling-layer"><figcaption aria-hidden="true">coupling-layer</figcaption></figure><p>左侧为<span class="math inline">\(z^i\)</span>, 右侧为<span class="math inline">\(x^i\)</span> <span class="math display">\[\begin{equation}\left\{\begin{aligned}z_{i\leq d}&amp;=x^i\\z_{i &gt; d}&amp;=\frac {x^i-\gamma^i}{\beta^i}\end{aligned}\right.\end{equation}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成模型之Flow-based Model(1)前置知识</title>
    <link href="/2022/07/08/sheng-cheng-mo-xing-zhi-flow-based-model-1-qian-zhi-zhi-shi/"/>
    <url>/2022/07/08/sheng-cheng-mo-xing-zhi-flow-based-model-1-qian-zhi-zhi-shi/</url>
    
    <content type="html"><![CDATA[<h1 id="Flow-based-Model前置知识"><a href="#Flow-based-Model前置知识" class="headerlink" title="Flow-based Model前置知识"></a>Flow-based Model前置知识</h1><blockquote><p>流模型是数学上严密推理得到的模型,本篇为数学上的前置内容  </p></blockquote><h2 id="雅各比矩阵-Jacobian-Matrix"><a href="#雅各比矩阵-Jacobian-Matrix" class="headerlink" title="雅各比矩阵 Jacobian Matrix"></a>雅各比矩阵 Jacobian Matrix</h2><p>对于两个矩阵$x$和$z$<br>$$z &#x3D; \left[\begin{matrix}z_{1}\z_{2}\end{matrix}\right]$$<br>$$x &#x3D; \left[\begin{matrix}x_{1}\x_{2}\end{matrix}\right]$$</p><p>$x$和$z$之间存在关系:<br>$x &#x3D; f(z)$, $z &#x3D; f^{-1}(x)$</p><p>Jacobian Matrix定义为:<br>$$<br>J_{f} &#x3D; \left[ \begin{matrix}<br>\partial x_{1}&#x2F;\partial z_{1} &amp;&amp; \partial x_{1}&#x2F;\partial z_{2} \<br>\partial x_{2}&#x2F;\partial z_{1} &amp;&amp; \partial x_{2}&#x2F;\partial z_{2}<br>\end{matrix} \right]<br>$$</p><p>$$<br>J_{f^{-1}} &#x3D; \left[ \begin{matrix}<br>\partial z_{1}&#x2F;\partial x_{1} &amp;&amp; \partial z_{1}&#x2F;\partial x_{2} \<br>\partial z_{2}&#x2F;\partial x_{1} &amp;&amp; \partial z_{2}&#x2F;\partial x_{2}<br>\end{matrix} \right]<br>$$</p><p>$$<br>J_{f}J_{f^{-1}}&#x3D;1<br>$$</p><h2 id="行列式-Determinant"><a href="#行列式-Determinant" class="headerlink" title="行列式 Determinant"></a>行列式 Determinant</h2><p>对于一个矩阵$A$<br>$$<br>A &#x3D; \left[ \begin{matrix}a &amp;&amp; b\c &amp;&amp; d\end{matrix}\right]<br>$$<br>其行列式结果为:<br>$$<br>\det(A) &#x3D; ad-bc<br>$$</p><p>对于一个矩阵$B$<br>$$<br>B &#x3D; \left[ \begin{matrix}a_{1} &amp;&amp; a_{2} &amp;&amp; a_{3}\a_{4} &amp;&amp; a_{5} &amp;&amp; a_{6}\a_{7} &amp;&amp; a_{8} &amp;&amp; a_{9}\end{matrix}\right]<br>$$<br>其行列式结果为:<br>$$<br>\det(B) &#x3D; a_{1}a_{5}a_{9}+a_{2}a_{6}a_{7}+a_{3}a_{4}a_{8}-a_{3}a_{5}a_{7}-a_{2}a_{4}a_{9}-a_{1}a_{6}a_{8}<br>$$</p><p>有公式:<br>$$<br>\det (A) &#x3D; \frac {1}{\det(A^{-1})}<br>$$</p><p>$$<br>\det (J_{f}) &#x3D; \frac {1}{\det(J_{f^{-1})}}<br>$$</p><h2 id="可变理论-change-of-variable-theorem"><a href="#可变理论-change-of-variable-theorem" class="headerlink" title="可变理论 change of variable theorem"></a>可变理论 change of variable theorem</h2><p>对于正态分布$\pi(z)$和概率分布$p(x)$<br>其中$x$和$z$满足$x&#x3D;f(z)$ </p><h3 id="一维形式"><a href="#一维形式" class="headerlink" title="一维形式"></a>一维形式</h3><p>$$ p(x’)\Delta x &#x3D; \pi (z’)\Delta z$$<br>$$p(x’) &#x3D; \pi (z’) |\frac {\mathrm{d} z}{\mathrm{d} x}| $$</p><h3 id="二维形式"><a href="#二维形式" class="headerlink" title="二维形式"></a>二维形式</h3><p>$$p(x’)|det(J_f)|&#x3D;\pi(z’)$$<br>$$p(x’) &#x3D; \pi(z’)|det(J_{f^{-1}})|$$</p><h3 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h3><p>如果$x$和$z$满足$x&#x3D;f(z)$,则他们的分布之间关系就是相差$|det(J_f)|$  </p><h2 id="生成器Generator"><a href="#生成器Generator" class="headerlink" title="生成器Generator"></a>生成器Generator</h2><p>对于一个网络$G$,我们定义他的分布为$P_{G}$,对于真实样本的分布为$P_{data}$<br>对于输入$z$,经过生成器得到的结果为$x$,记为$x&#x3D;G(z)$<br>说明$x$服从$P_{G}(x)$分布<br>显然一个好的生成器应当使得$P_{G}(x)$接近$P_{data}(x)$ </p><p>因此理论上有最优生成器$G^{<em>}$<br>$G^{</em>}&#x3D; argmax_{G} \sum\limits_{i&#x3D;1}^{m}logP_{G}(x^{i})$     其中 ${x^i from P_{data}(x)}$</p><p>$G^{*} \approx argmin_{G}KL(P_{data} || P_{G})$<br>(KL散度越小,两个分布越接近)</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爱快路由下无法正常解析DNS的问题</title>
    <link href="/2022/03/04/ai-kuai-lu-you-xia-wu-fa-zheng-chang-jie-xi-dns-de-wen-ti/"/>
    <url>/2022/03/04/ai-kuai-lu-you-xia-wu-fa-zheng-chang-jie-xi-dns-de-wen-ti/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最原始的问题是发现300M的电信宽带在经过软路由后下行只有30M, 而上行还保持正常, 在排查中出现了另外的问题: 直连爱快软路由DNS解析失败, 本文解决了这两个问题</p></blockquote><p>先说结论:</p><p>在客户机DNS服务器设置为网关(ikuai)的情况下, 必须设置爱快的DNS加速服务中使用代理模式才能生效, 同时要开启强制客户端DNS代理, 而此时使用爱快的DNS缓存模式无法正常解析DNS</p><p><img src="https://s2.loli.net/2022/03/04/nbLDmNeuoryJIFv.png"></p><hr><p>以下是完整版:</p><p>家中稳定运行半年的网络配置如图所示, 出现问题后开始排查问题位置</p><p>①查看是否是运营商限制了下行带宽: 测试家中网络硬路由部分的速率发现一切正常, 所以问题出在软路由</p><p>②逐个排查软路由内各部分: 依次关闭adg, openwrt没有改善问题, 所以问题可能在ikuai上</p><p><img src="https://s2.loli.net/2022/03/04/7X6kQ9LiKyqpxIu.png" alt="家中原始网络拓扑图, 分为经过软路由的改造部分和初始路由器部分"></p><p>将电脑直连ikuai, 手动设置IP, DNS和网关均为ikuai, 在未做其他修改的情况下出现了无法解析DNS的情况</p><p><img src="https://s2.loli.net/2022/03/04/qJOzB1orpgMm54n.png" alt="7X6kQ9LiKyqpxIu"></p><blockquote><p>qq和微信都是不需要解析DNS的软件, 如果这两个软件能正常使用而网页无法打开就能确定DNS出问题</p></blockquote><p>先后修改了ikuai和电脑的DNS服务器, 从openwrt内到ikuai再到阿里腾讯, 均不能正常上网</p><p><img src="https://s2.loli.net/2022/03/04/brmS398LFOdwzJC.jpg" alt="ikuai内的设置, 无法解析DNS"></p><p>ikuai内的设置, 无法解析DNS</p><p>然后怀疑是不是ikuai本身就无法正常上网, 使用ikuai内的测试工具发现能够ping通域名</p><p><img src="https://s2.loli.net/2022/03/04/OAGZUVnaegkl3Xi.jpg"></p><p>到这里完全没有思路, 之前也没见过路由能解析DNS但主机不能的情况, 在网上和论坛搜索了很久都没有找到相关的情况</p><p>最后的最后在ikuai官方的手册里找到了答案</p><p><a href="https://www.ikuai8.com/index.php?option=com_content&view=article&id=129:dns&catid=39&Itemid=228">https://www.ikuai8.com/index.php?option=com_content&amp;view&#x3D;article&amp;id&#x3D;129:dns&amp;catid&#x3D;39&amp;Itemid&#x3D;228</a></p><p><img src="https://s2.loli.net/2022/03/04/r9JVAwTgPLbYpqu.jpg"></p><p>所以修改了代理模式, 开启了强制代理, 问题解决</p><p><img src="https://s2.loli.net/2022/03/04/BHkuZeJ2OarSUNR.jpg"></p><blockquote><p>回到最初的降速问题, 经历了iperf测速等9981种方法也没有头绪，最后竟然在V2上找到了同样的病友，最后是修改了WiFi的信道和带宽…果然没再出问题，可能是过了个年周围的邻居变多了吧…</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>DNS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter学习笔记</title>
    <link href="/2021/09/28/flutter-xue-xi-bi-ji/"/>
    <url>/2021/09/28/flutter-xue-xi-bi-ji/</url>
    
    <content type="html"><![CDATA[<h1 id="Flutter学习笔记"><a href="#Flutter学习笔记" class="headerlink" title="Flutter学习笔记"></a>Flutter学习笔记</h1><h2 id="StatelessWidget和StatefulWidget"><a href="#StatelessWidget和StatefulWidget" class="headerlink" title="StatelessWidget和StatefulWidget"></a>StatelessWidget和StatefulWidget</h2><ul><li>StatelessWidget在创建之后将不会更改，想要更改只能new一个新的做替换。  </li><li>StatefulWidget通过在State类中调用setState((){})更新视图，触发State.build，将整个组件重新绘制，<strong>同时会导致所有子组件重新构造生成，该结点的兄弟结点组件也会被重新构造</strong>。</li></ul><h2 id="开发时如何选择"><a href="#开发时如何选择" class="headerlink" title="开发时如何选择"></a>开发时如何选择</h2><ul><li>优先使用 StatelessWidget  </li><li>含有大量子 Widget（如根布局、次根布局）慎用 SatefulWidget</li><li>尽量在叶子节点时使用 StatefulWidget</li><li>将会调用到setState((){}) 的代码尽可能的和要更新的视图封装在一个尽可能小的模块里</li><li>如果一个Widget需要reBuild，那么它的子节点、兄弟节点、兄弟节点的子节点应该尽可能少</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flutter</tag>
      
      <tag>Dart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>清河村支教回忆</title>
    <link href="/2021/09/23/qing-he-cun-zhi-jiao-hui-yi/"/>
    <url>/2021/09/23/qing-he-cun-zhi-jiao-hui-yi/</url>
    
    <content type="html"><![CDATA[<p><em>成文于2021年8月11日离开清河村。</em><br>&amp;emsp;&amp;emsp;大包小包的行李，颠颠簸簸的山路，出发前忐忐忑忑的心情在进入清河村后终于有所平复，深山、公路、虫鸣、鸟叫，不仔细观察很难发现这座隐藏在山峦间的完全小学。设施落后、环境糟糕、蚊虫困扰、饮食不同，完全符合一个城市人对农村的印象。农村生活过的我自认为对环境要求不高，到了这里也难免有些烦闷。<br><img src="https://i.loli.net/2021/09/24/1mYu6dJgSeHTXDx.jpg" alt="清河村完全小学的清晨"><br><img src="https://i.loli.net/2021/09/24/aDiCOMYG7mFnoRQ.jpg" alt="山"><br>&amp;emsp;&amp;emsp;闲时无事，揣起相机，沿着新修的道路在村里漫步，才发现这里的一切都不是想象中的那样。道路上摩托车和大货车不断，即使急转或陡坡也都轻松通过，山路两旁都是村民种植的茶树，时不时有个斗笠冒出来，采摘着最新鲜的三片茶叶。村中邻里相互十分熟悉，抱着小孩，背着菜筐，在村公所门口摆着龙门阵，爽朗的笑声老远外就能听到。最让我意外的就是脱贫援建建设的网络设施已经成为了村民们最佳的休闲方式，在路边时不时就能听到短视频平台的神曲，想必不少村民也是某些平台的大V。 </p><p><img src="https://i.loli.net/2021/09/24/idPy38m9OIn6hea.jpg" alt="清河村的晚霞"><br><img src="https://i.loli.net/2021/09/24/qpxP5ImXbkTgFwz.jpg" alt="清河村的晚霞"></p><p>&amp;emsp;&amp;emsp;这里离天很近，或者说这里就在所谓的“天上”，“天上”小学的学生自然都是“天兵天将”。这次梦想教室教授的对象是四年级的小学生，这天早上8点多我们还在硬板床上做着梦，“天兵天将”已经冲进了大门，在水泥操场上撒欢了。即使很多“天兵天将”穿着相同的“制服”和“盔甲”，明亮的眼神却在黝黑的皮肤中更显耀眼。或许是对未知事物的一丝丝恐惧，每当我用镜头想要捕捉到一张张笑脸时，他们会用远超我按下快门的速度表演一个变脸，迅速板起表情，我也只能悻悻地放下相机。<br><img src="https://i.loli.net/2021/09/24/d5Iw9AcqlbP6NyT.jpg" alt="小学"><br>&amp;emsp;&amp;emsp;对相机有所顾忌的学生们对待知识的态度就完全不同了，即使课上常常提到陌生的概念他们也十分愿意聆听学习，常常是一提问就好多双小手在空中挥舞。上过几天课后逐渐有学生不怕我的镜头了，下课期间几个好事的小男生上来摆弄我脚架上的相机快门，吸引了其他同学的注意，“天兵天将”便纷纷在相机里留下自己的鬼脸。最后一天，小孩子们拿着纸笔一个一个问我们的电话号码，看着一张张期待的小脸，一瞬间我就扭过了头，属实是不能被看见眼红啊。<br><img src="https://i.loli.net/2021/09/24/KBYmuUxLbeMypRw.jpg" alt="山路"><br>&amp;emsp;&amp;emsp;总有人说，不要去支教，即使去教这些大山中的孩子，给他们看了外界的美好，他们也走不出去，或是因为能力，或是因为家庭，支教的故事只是给他们徒增烦恼罢了。对待短期支教，我更想做的是给他们送去新鲜的思想，告诉他们“绿水青山就是金山银山”，告诉他们梦想绝不渺小，梦想永远伟大。<br><img src="https://i.loli.net/2021/09/24/hnegQSNylC7tz25.jpg" alt="银河"></p><p>&amp;emsp;&amp;emsp;我从不认为自己是一个运气很好的人，但是我为能来到这座深山中的小小村庄倍感荣幸。<br><img src="https://i.loli.net/2021/09/24/AT6KXrjhfLvO7Rb.jpg" alt="村里的兔兔"><br><img src="https://i.loli.net/2021/09/24/BTdOIXhmJCYlViM.jpg" alt="银河"></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>支教</tag>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础知识点</title>
    <link href="/2021/09/18/python-ji-chu-zhi-shi-dian/"/>
    <url>/2021/09/18/python-ji-chu-zhi-shi-dian/</url>
    
    <content type="html"><![CDATA[<h1 id="Python基础知识点"><a href="#Python基础知识点" class="headerlink" title="Python基础知识点"></a>Python基础知识点</h1><blockquote><p>本篇为给高二学生上课用的复习内容, 高二学生都能看懂!!!</p></blockquote><h2 id="数据类型6个"><a href="#数据类型6个" class="headerlink" title="数据类型6个"></a>数据类型6个</h2><ol><li><strong>整型 int</strong><br>数学中的整数，如1，-8080，0    </li><li><strong>实型（浮点数）float</strong><br>数学中的实数，如3.14，9e-4  </li><li><strong>字符串 string</strong><br>以引号开始结束的一串字符，如<code>&#39;this is a string&#39;</code>  </li><li><strong>布尔型 bool</strong><br>只有<code>True</code>和<code>False</code>两个值  </li><li><strong>列表 list</strong><br>以中括号开始结束的一种数据类型，如<code>[1,2,3,4,5]</code>  </li><li><strong>字典 dictionary</strong><br>以大括号开始结束，存储内容为键值对，如<code>&#123;&#39;name&#39;:&#39;wow&#39;,&#39;age&#39;:17&#125;</code><br>取出下列字典中的’name’键对应的值：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">d=&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;wow&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">17</span>&#125;  <br>d[<span class="hljs-string">&#x27;name&#x27;</span>]=<br></code></pre></td></tr></table></figure></li></ol><h4 id="索引与切片"><a href="#索引与切片" class="headerlink" title="索引与切片"></a>索引与切片</h4><p>请写出下列索引与切片的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">info=[<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;what&#x27;</span>,<span class="hljs-number">5432</span>]  <br>info2=[ [<span class="hljs-string">&#x27;world&#x27;</span>,<span class="hljs-string">&#x27;you&#x27;</span>],[<span class="hljs-number">231</span>,<span class="hljs-string">&#x27;how&#x27;</span>] ]   <br>info[<span class="hljs-number">1</span>]=  <br>info[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=  <br>info[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]=  <br>info2[<span class="hljs-number">0</span>]=  <br>info2[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=  <br>info2[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=  <br>info2[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]=  <br></code></pre></td></tr></table></figure><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p><code>+-*/</code>加减乘除  <code>//</code>整除，结果取整数部分<br><code>%</code>取余数  <code>**</code>乘方   </p><p><em>算数运算符得到的结果为数</em> </p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p><code>&gt;&lt;</code>大于小于 <code>&gt;= &lt;=</code>大于等于 小于等于<br><code>==</code>等于<code>!=</code>不等于<br><code>in</code>包含于  </p><p><em>关系运算得到的结果为布尔型，即<code>True</code>和<code>False</code></em></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><code>and</code>与运算，只有两个<code>True</code>结果才为<code>True</code><br><code>or</code> 或运算，只要有一个<code>True</code>结果就为<code>True</code><br><code>not</code>非运算，<code>not True</code>结果为<code>False</code></p><p><em>逻辑运算得到的结果为布尔型，即<code>True</code>和<code>False</code></em>  </p><hr><h2 id="变量和赋值"><a href="#变量和赋值" class="headerlink" title="变量和赋值"></a>变量和赋值</h2><p><strong>常量</strong>：0，3.14，60000，pi，e等数学上的客观数字<br><strong>变量</strong>：在编程中声明&#x2F;定义的一个代号，用于存储数据。变量名可以包括字母、数字、下划线，不可以用数字开头  </p><p><strong>赋值语句</strong><br><code>=</code>用于赋值，将等号右侧的值赋给左侧的变量  </p><blockquote><p>n&#x3D;0    #将0赋值给变量n<br>n&#x3D;n+1  #将n+1的值赋给变量n<br>n+&#x3D;1   #将n+1的值赋给变量n，即n的值增加1  </p></blockquote><p><em>注意：<code>==</code>和<code>=</code>在用法上完全不同</em></p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p><code>print(x)</code>输出x的值<br><code>input(x)</code>将x的值输出在屏幕上，并读取用户的输入，以字符串存储<br><code>int(x)</code>将x转换为整型<br><code>float(x)</code>将x转换为浮点数  </p><hr><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><blockquote><p>if 条件:<br>&amp;emsp;&amp;emsp;语句<br>elif 条件:<br>&amp;emsp;&amp;emsp;语句<br>else:<br>&amp;emsp;&amp;emsp;语句  </p></blockquote><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;偶数&#x27;</span>)  <br>esle:  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;奇数&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>序列遍历完成后退出循环</p><blockquote><p>for 变量 in 序列:<br>&amp;emsp;&amp;emsp;循环体  </p></blockquote><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s=<span class="hljs-number">0</span>  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">101</span>,<span class="hljs-number">1</span>):  <br>s+=i  <br><span class="hljs-built_in">print</span>(i)  <br></code></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>循环条件为<code>True</code>时进入循环，否则退出循环  </p><blockquote><p>while 循环条件:<br>&amp;emsp;&amp;emsp;循环体  </p></blockquote><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s=<span class="hljs-number">0</span>  <br>i=<span class="hljs-number">0</span>  <br><span class="hljs-keyword">while</span> i&lt;=<span class="hljs-number">100</span>:  <br>    s+=i<br>    i+=<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p><em><strong>代码除了横向阅读，也要纵向阅读</strong></em><br><em><strong>横向阅读看<code>功能</code>，纵向阅读看<code>结构</code></strong></em><br><em><strong>注意循环体和分支结构语句块的缩进</strong></em></p><hr><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>使用for循环和while循环两种方式计算[100,1000]中所有奇数的和<br>请在下方书写<br><em>提示：判断一个数是偶数还是奇数是用余数的方式</em>  </p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>信息技术</tag>
      
      <tag>支教</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo快速使用指北</title>
    <link href="/2020/10/12/hexo-kuai-su-shi-yong-zhi-bei/"/>
    <url>/2020/10/12/hexo-kuai-su-shi-yong-zhi-bei/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>可以指定模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br>$ hexo new post <span class="hljs-string">&quot;这是一个新的笔记&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br>$ hexo s<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br>$ hexo g<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br>$ hexo d<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="命令可以组合使用"><a href="#命令可以组合使用" class="headerlink" title="命令可以组合使用"></a>命令可以组合使用</h3><blockquote><p>hexo g &amp;&amp; hexo d &amp;&amp; hexo s</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
